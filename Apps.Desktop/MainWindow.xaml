<Window 
    x:Class="Desktop.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Desktop"
    xmlns:Converters="clr-namespace:Imagin.Common.Globalization.Converters;assembly=Imagin.Common.WPF"
    xmlns:Hardcodet="http://www.hardcodet.net/taskbar"
    xmlns:i="http://imagin.tech/imagin/common"
    i:LocalizeDictionary.DesignCulture="en"
    i:ResxLocalizationProvider.DefaultAssembly="{i:AssemblyName}"
    i:ResxLocalizationProvider.DefaultDictionary="Main"
    mc:Ignorable="d"
    i:WindowExtensions.AlwaysOnBottom="True"
    Padding="0"
    ResizeMode="NoResize"
    ShowInTaskbar="True"
    WindowState="Maximized">
    <Window.Resources>
        <ResourceDictionary>
            <i:ColorToSolidColorBrushConverter
                x:Key="ColorToSolidColorBrushConverter"/>
            <i:ObjectIsConverter 
                x:Key="ObjectIsConverter"/>
            <i:ObjectToTypeConverter 
                x:Key="ObjectToTypeConverter"/>
            <i:HasFlagConverter 
                x:Key="HasFlagConverter"/>
            <i:ValueEqualsParameterMultiConverter 
                x:Key="ValueEqualsParameterMultiConverter"/>

            <Converters:TranslateConverter 
                x:Key="TranslateConverter"/>

            <Style x:Key="Style.Thumb" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border
                                    Background="#007acc"
                                    Cursor="{TemplateBinding Cursor}">
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <ContextMenu x:Key="ContextMenu.TaskbarIcon">
                <ContextMenu.Resources>
                    <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Converter={StaticResource ObjectToTypeConverter}}" Value="{x:Type local:Screen}">
                                <Setter Property="Command" Value="{i:MainViewModel SelectScreenCommand}"/>
                                <Setter Property="CommandParameter" Value="{Binding}"/>
                                <Setter Property="HeaderTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <Grid i:GridExtensions.Columns="*,Auto">
                                                <TextBlock Text="{Binding Index, StringFormat='Screen {0}'}"/>
                                                <i:MaskedButton
                                                    Grid.Column="1"
                                                    Command="{i:MainViewModel RemoveScreenCommand}"
                                                    CommandParameter="{Binding}"
                                                    Margin="5,0,0,0"
                                                    Source="{i:Image Desktop, Images/Trash.png}"/>
                                            </Grid>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="IsCheckable" Value="True"/>
                                <Setter Property="i:MenuItemExtensions.GroupName" Value="Screens"/>
                                <Setter Property="i:MenuItemExtensions.SelectionMode" Value="Single"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </ContextMenu.Resources>
                <ContextMenu.ItemsSource>
                    <CompositeCollection>
                        <MenuItem Header="Draw"
                            Command="{Binding DrawCommand}"
                            Icon="{i:Image Desktop, Images/Pencil.png}"/>
                        <Separator/>
                        <CollectionContainer Collection="{i:MainViewModel Screens}"/>
                        <Separator/>
                        <MenuItem Header="About"
                            Click="OnAbout"
                            Icon="{i:Image Desktop, Images/Info.png}"/>
                        <MenuItem Header="Options"
                            Click="OnOptions"
                            Icon="{i:Image Desktop, Images/Options.png}"/>
                        <Separator/>
                        <MenuItem Header="Exit"
                            Click="OnExit"
                            Icon="{i:Image Desktop, Images/X.png}"/>
                    </CompositeCollection>
                </ContextMenu.ItemsSource>
            </ContextMenu>
        </ResourceDictionary>
    </Window.Resources>
    <Window.Style>
        <Style TargetType="Window">
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="i:WindowExtensions.Extends" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Window">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter/>
                            </AdornerDecorator>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="WindowStyle" Value="None"/>
        </Style>
    </Window.Style>
    <Window.TaskbarItemInfo>
        <TaskbarItemInfo Description="{Binding TaskbarItemDescription}">
            <TaskbarItemInfo.ThumbButtonInfos>
                <ThumbButtonInfo 
                    Command="{Binding LeftScreenCommand}"
                    Description="Previous screen"
                    ImageSource="{i:Image Desktop, Images/ArrowLeft.png}"/>
                <ThumbButtonInfo 
                    Command="{Binding AddScreenCommand}"
                    Description="Add screen"
                    ImageSource="{i:Image Desktop, Images/Plus.png}"/>
                <ThumbButtonInfo 
                    Command="{Binding RightScreenCommand}"
                    Description="Next screen"
                    ImageSource="{i:Image Desktop, Images/ArrowRight.png}"/>
            </TaskbarItemInfo.ThumbButtonInfos>
        </TaskbarItemInfo>
    </Window.TaskbarItemInfo>
    <Window.Title>
        <MultiBinding Converter="{StaticResource TranslateConverter}">
            <Binding Source="{i:AssemblyProduct}"/>
            <i:Options Path="Language"/>
        </MultiBinding>
    </Window.Title>
    <Grid x:Name="Grid">
        <Hardcodet:TaskbarIcon
            x:Name="TaskbarIcon"
            ContextMenu="{StaticResource ContextMenu.TaskbarIcon}"
            IconSource="pack://application:,,,/Desktop;component/Logo.ico"
            MenuActivation="LeftOrRightClick"
            ToolTipText="{i:AssemblyProduct}"
            Visibility="Visible"/>
        <Grid>
            <i:TransitionView 
                Content="{i:MainViewModel Screen}"
                Transition="{i:Options ScreenTransition}">
                <i:TransitionView.ContentTemplate>
                    <DataTemplate DataType="{x:Type local:Screen}">
                        <ItemsControl ItemsSource="{Binding}">
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="FrameworkElement">
                                    <Setter Property="Canvas.Left" Value="{Binding Position.X, Mode=TwoWay}"/>
                                    <Setter Property="Canvas.Top" Value="{Binding Position.Y, Mode=TwoWay}"/>
                                    <Setter Property="Height" Value="{Binding Size.Height, Mode=TwoWay}"/>
                                    <Setter Property="Width" Value="{Binding Size.Width, Mode=TwoWay}"/>
                                    <Setter Property="i:ControlExtensions.FadeIn" Value="True"/>
                                    <Setter Property="i:ControlExtensions.FadeOut" Value="True"/>
                                    <Setter Property="i:ControlExtensions.IsResizable" Value="False"/>
                                    <Setter Property="i:ControlExtensions.ResizeSnap" Value="{i:Options TileSnap}"/>
                                    <Setter Property="i:ControlExtensions.ResizeThumbStyle" Value="{DynamicResource Style.Thumb}"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding IsSelected}" Value="True"/>
                                                <Condition Binding="{Binding IsLocked}" Value="False"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="i:ControlExtensions.IsResizable" Value="True"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <i:DraggableCanvas SnapToGrid="{i:Options TileSnap}"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Grid.Resources>
                                            <i:Reference x:Key="Tile" Data="{Binding}"/>
                                        </Grid.Resources>
                                        <local:TileView
                                            x:Name="PART_TileView"
                                            HeaderAlignment="{i:Options TileHeaderAlignment}"
                                            HeaderPlacement="{i:Options TileHeaderPlacement}">
                                            <local:TileView.ContextMenu>
                                                <ContextMenu
                                                    DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}">
                                                    <MenuItem
                                                        Header="Lock"
                                                        IsCheckable="True"
                                                        IsChecked="{Binding IsLocked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                        StaysOpenOnClick="True"/>
                                                    <Separator/>
                                                    <MenuItem
                                                        Command="{i:MainViewModel RemoveTileCommand}"
                                                        CommandParameter="{Binding}"
                                                        Header="Remove"/>
                                                </ContextMenu>
                                            </local:TileView.ContextMenu>
                                            <local:TileView.Style>
                                                <Style TargetType="{x:Type local:TileView}">
                                                    <Setter Property="BorderThickness" Value="1"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Active.Border}"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                                            <Setter Property="BorderBrush" Value="{DynamicResource Brush.Window.Border}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </local:TileView.Style>
                                        </local:TileView>
                                    </Grid>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </DataTemplate>
                </i:TransitionView.ContentTemplate>
            </i:TransitionView>
            <Grid
                x:Name="PART_Grid"
                Visibility="Collapsed">
                <i:SelectionCanvas
                    x:Name="PART_SelectionCanvas"
                    Background="#CC000000"
                    HorizontalAlignment="Stretch"
                    Selected="OnSelected"
                    VerticalAlignment="Stretch"/>
                <Button 
                    Command="{Binding CancelCommand}"
                    HorizontalAlignment="Center"
                    Margin="0,0,0,10"
                    Padding="20,10"
                    Style="{DynamicResource Button.Green}"
                    VerticalAlignment="Bottom">
                    <StackPanel Orientation="Horizontal">
                        <i:MaskedImage
                            Margin="0,0,10,0"
                            Source="{i:Image Desktop, Images/Pencil.png}"
                            SourceColor="#FFF"
                            SourceHeight="16"
                            SourceWidth="16"/>
                        <TextBlock Text="Cancel"/>
                    </StackPanel>
                </Button>
            </Grid>
        </Grid>
    </Grid>
</Window>