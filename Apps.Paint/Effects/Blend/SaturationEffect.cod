//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   sampler2D blend;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   input        s0       1
//   blend        s1       1
//

    ps_3_0
    def c0, 4, 0.166666672, 1, 6
    def c1, 0.333333343, 1.33333337, -0.666666627, 1
    def c2, 0.5, -1, 2, 0
    def c3, -0.166666672, -0.5, -0.666666687, 0.666666687
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0
    dcl_2d s1

#line 117 "C:\Users\james\OneDrive\Development\Software\Library\Imagin.NET\Apps.Paint\Blend\SaturationEffect.fx"
    texld r0, v0, s0  // ::inputColor<0,1,2,3>

#line 120
    texld r1, v0, s1  // ::blendColor<0,1,2,3>

#line 127
    rcp r2.x, r1.w
    mul_sat r1.xyz, r1, r2.x  // ::blendColor<0,1,2>

#line 21
    add r2.x, -r0.y, r0.x
    cmp r2.yz, r2.x, r0.xyxw, r0.xxyw
    min r3.x, r0.z, r2.y  // ::fmin<0>
    max r3.y, r2.z, r0.z  // ::fmax<0>
    add r2.y, r3.x, r3.y  // ::maxplusmin<0>

#line 27
    mul r4.xyz, r2.y, c2.x  // ::hsl<2,2,2>

#line 21
    add r2.z, -r1.y, r1.x
    cmp r1.xy, r2.z, r1.yxzw, r1
    min r2.z, r1.z, r1.x  // ::fmin<0>
    max r2.w, r1.y, r1.z  // ::fmax<0>
    add r1.x, -r2.z, r2.w  // ::delta<0>
    add r1.y, r2.z, r2.w  // ::maxplusmin<0>

#line 40
    add r1.z, r1.y, c2.y
    rcp r2.z, r1.y
    mul r2.z, r1.x, r2.z  // ::hsl<1>
    add r1.y, -r1.y, c2.z
    rcp r1.y, r1.y
    mul r1.y, r1.y, r1.x  // ::hsl<1>
    cmp r1.y, r1.z, r1.y, r2.z  // ::hsl<1>

#line 56
    cmp r1.x, -r1_abs.x, c2.w, r1.y  // ::hsl<1>

#line 86
    if_eq r1.x, c2.w

#line 89
    else

#line 23
      add r1.y, -r3.x, r3.y  // ::delta<0>

#line 47
      add r2.zw, r0.xyxy, -r3.y
      add r1.z, -r0.z, r0.y
      rcp r3.x, r1.y
      mul r1.z, r1.z, r3.x  // ::hsl<0>
      add r3.y, -r0.x, r0.z
      mad r3.y, r3.y, r3.x, c2.z  // ::hsl<0>
      mad r2.x, r2.x, r3.x, c0.x  // ::hsl<0>
      cmp r2.x, -r2_abs.w, r3.y, r2.x  // ::hsl<0>
      cmp r1.z, -r2_abs.z, r1.z, r2.x  // ::hsl<0>
      mul r2.x, r1.z, c0.y  // ::hsl<0>

#line 55
      mad r2.z, r1.z, c0.y, c0.z  // ::hsl<0>
      cmp r1.z, r1.z, r2.x, r2.z  // ::hsl<0>
      cmp r1.y, -r1_abs.y, c2.w, r1.z  // ::hsl<0>

#line 93
      add r1.z, r2.y, c2.y
      add r2.x, r1.x, -c2.y
      mul r2.x, r2.x, r4.z  // ::temp2<0>
      mad r2.z, r2.y, c2.x, r1.x
      mad r1.x, r1.x, -r4.z, r2.z  // ::temp2<0>
      cmp r1.x, r1.z, r1.x, r2.x  // ::temp2<0>
      add r1.z, -r1.x, r2.y  // ::temp1<0>

#line 64
      add r2, r1.y, c1  // HueToRGB::temp3<0,0,0,0>
      add r3.x, -r2.x, -c2.y
      cmp r2.z, r3.x, r2.x, r2.z  // HueToRGB::temp3<0>
      cmp r2.x, r2.x, r2.z, r2.y  // HueToRGB::temp3<0>

#line 71
      add r2.y, -r1.z, r1.x
      mul r2.z, r2.y, c0.w
      mad r3.x, r2.z, r2.x, r1.z  // ::rgbComponent<0>

#line 74
      add r3.yzw, r2.x, c3.xxyz
      add r2.x, -r2.x, c3.w
      mul r2.x, r2.x, r2.y
      mad r2.x, r2.x, c0.w, r1.z  // ::rgbComponent<0>
      cmp r2.x, r3.w, r1.z, r2.x  // ::rgbComponent<0>
      cmp r2.x, r3.z, r2.x, r1.x  // ::rgbComponent<0>
      cmp r4.x, r3.y, r2.x, r3.x  // ::rgbComponent<0>

#line 65
      add r2.x, -r1.y, -c2.y
      add r3, r1.y, -c1.wxzy  // HueToRGB::temp3<0,0,0,0>
      cmp r2.x, r2.x, r1.y, r3.x  // HueToRGB::temp3<0>
      cmp r1.y, r1.y, r2.x, r2.w  // HueToRGB::temp3<0>

#line 71
      mad r2.x, r2.z, r1.y, r1.z  // ::rgbComponent<0>

#line 74
      add r5.xyz, r1.y, c3
      add r1.y, -r1.y, c3.w
      mul r1.y, r1.y, r2.y
      mad r1.y, r1.y, c0.w, r1.z  // ::rgbComponent<0>
      cmp r1.y, r5.z, r1.z, r1.y  // ::rgbComponent<0>
      cmp r1.y, r5.y, r1.y, r1.x  // ::rgbComponent<0>
      cmp r4.y, r5.x, r1.y, r2.x  // ::rgbComponent<0>

#line 65
      add r1.y, -r3.y, -c2.y
      cmp r1.y, r1.y, r3.y, r3.w  // HueToRGB::temp3<0>
      cmp r1.y, r3.y, r1.y, r3.z  // HueToRGB::temp3<0>

#line 71
      mad r2.x, r2.z, r1.y, r1.z  // ::rgbComponent<0>

#line 74
      add r3.xyz, r1.y, c3
      add r1.y, -r1.y, c3.w
      mul r1.y, r1.y, r2.y
      mad r1.y, r1.y, c0.w, r1.z  // ::rgbComponent<0>
      cmp r1.y, r3.z, r1.z, r1.y  // ::rgbComponent<0>
      cmp r1.x, r3.y, r1.y, r1.x  // ::rgbComponent<0>
      cmp r4.z, r3.x, r1.x, r2.x  // ::rgbComponent<0>

#line 103
    endif

#line 135
    lrp oC0.xyz, r1.w, r4, r0  // ::main<0,1,2>
    mov oC0.w, r0.w  // ::main<3>

// approximately 89 instruction slots used (2 texture, 87 arithmetic)
