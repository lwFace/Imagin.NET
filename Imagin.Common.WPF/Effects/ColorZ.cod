//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 Color;
//   float Component;
//   float Model;
//   sampler2D input;
//   float pi;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Model        c0       1
//   Component    c1       1
//   Color        c2       1
//   pi           c3       1
//   input        s0       1
//

    ps_3_0
    def c4, 255, 0.5, -0.0187292993, 0.0742610022
    def c5, -0.212114394, 1.57072878, -2, 3.14159274
    def c6, 2, 4, 360, 100
    def c7, -7, -8, -9, 0.514999986
    def c8, 0.298999995, 0.587000012, 0.114, 0.666666687
    def c9, 0.596000016, -0.275000006, -0.32100001, 0.61500001
    def c10, 0.211999997, -0.527999997, 0.31099999, 0.100000001
    def c11, -2, -3, -4, -5
    def c12, 6, 0.166666672, -6, -0.166666672
    def c13, -0.43599999, -0.61500001, 0, 0.00278551527
    def c14, 359, 0.00278551527, -359, -0.00278551527
    def c15, 6.28318548, -3.14159274, 0.0174532942, 1.04719758
    def c16, 240, 0.0174532942, -2.09439516, -4.18879032
    def c17, 120, 0.00277777785, 0.5, 0.159154937
    def c18, 359, 100, 255, 0.00999999978
    def c19, 3, 1, 0.333333343, 180
    def c20, 0.00277777785, 0.333333343, -0.333333343, 0.666666687
    def c21, -300, 0.00277777785, -0.666666687, 1
    def c22, 0.00999999978, 0.0166666675, 1, 0.00392156886
    def c23, 0.95599997, -0.272000015, 0.620999992, -0.647000015
    def c24, -1.10800004, 1.13999999, 0.58099997, 2.03200006
    def c25, 0.00277777785, -0.333333343, -0.666666687, 1.70500004
    def c26, 1, 0.595700026, 0.522599995, 359
    def c27, 2, 0.5, -2, -0.5
    def c28, 239.999985, 179.999985, 119.999992, 59.9999962
    def c29, 6, 2, 60, 3
    def c30, 2, -1, -299.999969, -359.999969
    def c31, -180, -240, -300, 0.395000011
    def c32, 0.0097833341, 0.298999995, 1.79399991, 0.587000012
    def c33, 3.52200007, 0.684000015, 0.114, 0.298999995
    def c34, 0.684000015, 1.79399991, 0.587000012, 0.114
    def c35, 0.5, 0.289000005, -0.147, 0.43599999
    def c36, 360, 0.5, 0.25, -0.25
    def c37, 1, 0, -1, 0.166666672
    def c38, 6, 4, 2, 5
    def c39, 0, 100, 1, 0.5
    def c40, -6, -7, -8, -9
    def c41, 1, 0.43599999, 0.61500001, 0
    def c42, -1, -2, -3, -4
    def c43, -5, -6, -7, -8
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0

#line 1029 "C:\Users\james\OneDrive\Development\Software\Library\Imagin.NET\Imagin.Common.WPF\Effects\ColorZ.fx"
    texld r0, v0, s0  // ::color<3>

#line 943
    abs r1.x, c0.x
    cmp r1.x, -r1.x, c37.x, c37.y
    mov r2.xy, c37
    if_eq c0.x, r2.y

#line 946
      mov r1.yzw, c2.xyzx  // ::result<1,2,0>

#line 46
      mov r3.xyz, c37.y
      mov r4.xyz, c37.x  // ::result<0,1,2>
      mov r2.z, c37.y

#line 946
    else
      if_eq c0.x, r2.x

#line 702
        add r5.xyz, -c2.zxyw, c2.yzxw

#line 685
        cmp r6.xy, r5.z, c2, c2.yxzw
        max r2.w, r6.x, c2.z  // ::maximum<0>
        min r3.w, c2.z, r6.y  // ::minimum<0>
        add r4.w, r2.w, -r3.w  // ::chroma<0>

#line 691
        add r5.w, r4.w, c37.z
        add r6.x, -r4.w, c37.x
        rcp r6.x, r6.x
        mul r3.w, r3.w, r6.x  // ::grayscale<0>

#line 700
        add r6.xy, r2.w, -c2
        rcp r2.w, r4.w

#line 704
        mul r5.x, r2.w, r5.x

#line 698
        cmp r6.zw, r5.x, c12.xyxy, c12
        mul r5.x, r5.x, r6.w
        frc r5.x, r5.x
        mul r5.x, r5.x, r6.z  // ::hue<0>

#line 704
        mad r5.yz, r5, r2.w, c6.xxyw  // ::hue<0,0>
        cmp r2.w, -r6_abs.y, r5.y, r5.z  // ::hue<0>
        cmp r2.w, -r6_abs.x, r5.x, r2.w  // ::hue<0>
        mul r5.x, r2.w, c37.w  // ::hue<0>
        cmp r2.w, r2.w, c37.x, c37.z
        mul r5.x, r2.w, r5.x
        frc r5.x, r5.x
        mul r2.w, r2.w, r5.x  // ::hue<0>

#line 711
        mul r2.w, r2.w, c6.z
        cmp r1.w, -r4.w, c37.y, r2.w  // ::result<0>
        mul r1.y, r4.w, c6.w  // ::result<1>
        mul r2.w, r3.w, c6.w
        cmp r1.z, r5.w, c37.y, r2.w  // ::result<2>

#line 951
      else
        mov r5.x, c0.x  // ::Model<0>
        if_eq r5.x, c6.x

#line 744
          add r5.yz, -c2.xzxw, c2

#line 720
          cmp r6.xy, r5.y, c2.zyzw, c2.yzzw
          min r2.w, r6.x, c2.x  // ::minimum<0>
          max r3.w, c2.x, r6.y  // ::maximum<0>
          add r2.w, -r2.w, r3.w  // ::chroma<0>

#line 735
          rcp r4.w, r3.w
          mul r6.y, r2.w, r4.w  // ::_s<0>

#line 742
          add r6.zw, -r3.w, c2.xyxy

#line 739
          rcp r4.w, r2.w

#line 744
          mul r5.w, r4.w, r5.y  // ::_h<0>
          mad r7.xy, r5.yzzw, r4.w, c29  // ::_h<0>

#line 740
          cmp r4.w, r5.y, r5.w, r7.x  // ::_h<0>

#line 747
          cmp r5.y, -r6_abs.w, r7.y, c37.y  // ::_h<0>
          cmp r4.w, -r6_abs.z, r4.w, r5.y  // ::_h<0>
          mul r6.x, r4.w, c29.z  // ::_h<0>
          cmp r1.yw, -r2_abs.w, c37.y, r6.xyzx  // ::_s<0>, ::_h<0>
          mul r1.y, r1.y, c6.w  // ::result<1>
          mul r1.z, r3.w, c6.w  // ::result<2>

#line 956
        else
          if_eq r5.x, c29.w

#line 760
            mov r6.xyz, c2  // ::Color<0,1,2>
            mul r5.yzw, r6.xxyz, c4.x  // ::_input<0,1,2>
            add r2.w, r5.z, r5.y
            mad r2.w, r6.z, c4.x, r2.w  // ::sum<0>
            rcp r3.w, r2.w
            mul r6.xyz, r3.w, r5.yzww  // ::r<0>, ::g<0>, ::b<0>

#line 773
            mad r5.yzw, r5.xyyz, r3.w, -r6.xyzz

#line 769
            add r3.w, r5.z, r5.y
            mul r3.w, r3.w, c4.y

#line 773
            mul r5.yz, r5.xyww, r5
            add r4.w, r5.z, r5.y
            rsq r4.w, r4.w
            mul r3.w, r3.w, r4.w
            add r4.w, -r3_abs.w, c37.x
            rsq r4.w, r4.w
            rcp r4.w, r4.w
            mad r5.y, r3_abs.w, c4.z, c4.w
            mad r5.y, r5.y, r3_abs.w, c5.x
            mad r5.y, r5.y, r3_abs.w, c5.y
            mul r4.w, r4.w, r5.y
            mad r5.y, r4.w, c5.z, c5.w
            cmp r3.w, r3.w, c37.y, c37.x
            mad r3.w, r5.y, r3.w, r4.w  // ::h<0>

#line 778
            mov r7.x, c6.x
            mad r4.w, c3.x, r7.x, -r3.w  // ::h<0>
            cmp r3.w, r5.w, r3.w, r4.w  // ::h<0>
            min r4.w, r6.z, r6.y
            min r5.y, r4.w, r6.x
            mad r4.w, r5.y, -c19.x, c19.y  // ::s<0>
            mul r1.z, r2.w, c19.z  // ::i<0>
            mul r2.w, r3.w, c19.w
            rcp r3.w, c3.x
            mul r1.w, r2.w, r3.w  // ::result<0>
            mul r1.y, r4.w, c6.w  // ::result<1>

#line 961
          else
            if_eq r5.x, c6.y

#line 815
              add r5.yzw, -c2.xzyx, c2.xyxz

#line 790
              cmp r6.xy, r5.z, c2, c2.yxzw
              max r2.w, r6.x, c2.z  // ::maximum<0>
              min r3.w, c2.z, r6.y  // ::minimum<0>
              add r4.w, r2.w, -r3.w  // ::chroma<0>
              add r3.w, r2.w, r3.w
              mul r1.z, r3.w, c4.y  // ::l<0>

#line 799
              add r6.x, r3.w, c37.z
              rcp r6.y, r3.w
              mul r6.y, r4.w, r6.y
              add r3.w, -r3.w, c6.x
              rcp r3.w, r3.w
              mul r3.w, r3.w, r4.w
              cmp r6.y, r6.x, r3.w, r6.y  // ::s<0>

#line 814
              add r7.xyz, -r2.w, c2.xzyw

#line 805
              rcp r2.w, r4.w

#line 815
              mul r3.w, r2.w, r5.y  // ::h<0>
              mad r8.xyz, r5.yzww, r2.w, c38  // ::h<0,0>

#line 806
              cmp r2.w, r5.y, r3.w, r8.x  // ::h<0>

#line 815
              cmp r3.w, -r7_abs.z, r8.z, c37.y  // ::h<0>
              cmp r3.w, -r7_abs.y, r8.y, r3.w  // ::h<0>
              cmp r2.w, -r7_abs.x, r2.w, r3.w  // ::h<0>
              mul r6.x, r2.w, c29.z  // ::h<0>
              cmp r1.yw, -r4_abs.w, c37.y, r6.xyzx  // ::s<0>, ::h<0>

#line 966
            else
              if_eq r5.x, c38.w

#line 830
                mov r6.xyz, c2  // ::Color<0,1,2>
                mul r5.yzw, r6.xxyz, c4.x  // ::_input<0,1,2>

#line 834
                mul r7.xyz, r5.yzww, r5.yzww
                mul r7.xy, r7, c8
                add r2.w, r7.y, r7.x
                mad r2.w, r7.z, c8.z, r2.w
                rsq r2.w, r2.w
                rcp r2.w, r2.w  // ::p<0>
                mad r6.xw, r6.x, c4.x, -r5.wyzz
                cmp r3.w, -r6_abs.x, c37.x, c37.y
                cmp r3.w, -r6_abs.w, r3.w, c37.y
                if_ne r3.w, -r3.w

#line 840
                  mov r7.xy, c37.y  // ::h<0>, ::s<0>
                else

#line 853
                  mad r7.zw, r6.xyyz, c4.x, -r5.xywz
                  mul r8.xy, r7.wzzw, c37.w

#line 848
                  rcp r3.w, r6.w
                  mad r9.y, r8.x, -r3.w, c37.x  // ::h<0>
                  rcp r3.w, r5.y

#line 853
                  rcp r4.w, r6.x
                  mul r9.x, r4.w, r8.y  // ::h<0>
                  mad r9.zw, r5, -r3.w, c37.x  // ::s<0,0>
                  cmp r8.xy, r7.w, r9.yzzw, r9.xwzw  // ::h<0>, ::s<0>
                  cmp r3.w, r6.x, -c37.x, -c37.y
                  cmp r3.w, r6.w, r3.w, c37.y
                  cmp r8.xy, r3.w, c37.y, r8  // ::h<0>, ::s<0>

#line 883
                  mul r8.zw, r6.xyxw, c37.w

#line 863
                  rcp r3.w, r7.z
                  mad r9.y, r8.z, -r3.w, c19.z  // ::h<0>
                  rcp r3.w, r5.z

#line 868
                  mad r6.yz, r6, c4.x, -r5.y

#line 878
                  mul r10.xy, r6.zyzw, c37.w

#line 868
                  rcp r4.w, r6.y
                  mad r9.x, r10.x, r4.w, c19.z  // ::h<0>
                  mad r9.zw, r5.xywy, -r3.w, c37.x  // ::s<0,0>
                  cmp r6.xw, r6.x, r9.yyzz, r9  // ::h<0>, ::s<0>

#line 886
                  cmp r9.xy, r7.zwzw, -c37.x, -c37.y
                  cmp r9.xy, r6.yzzw, r9, c37.y

#line 871
                  cmp r6.xw, r9.x, r8.xyzy, r6  // ::h<0>, ::s<0>

#line 878
                  rcp r3.w, r6.z
                  mad r10.y, r10.y, -r3.w, c8.w  // ::h<0>
                  rcp r3.w, r5.w

#line 883
                  rcp r4.w, r7.w
                  mad r10.x, r8.w, r4.w, c8.w  // ::h<0>
                  mad r10.zw, r5.xyyz, -r3.w, c37.x  // ::s<0,0>
                  cmp r5.yz, r6.y, r10, r10.xxww  // ::h<0>, ::s<0>
                  cmp r7.xy, r9.y, r6.xwzw, r5.yzzw  // ::h<0>, ::s<0>
                endif
                mul r1.y, r7.y, c6.w  // ::result<1>
                mad r3.w, r7.x, c36.x, c36.y
                frc r4.w, r3.w
                add r1.w, r3.w, -r4.w  // ::result<0>
                add r2.w, r2.w, c4.y
                frc r3.w, r2.w
                add r1.z, r2.w, -r3.w  // ::result<2>

#line 971
              else
                if_eq r5.x, c12.x

#line 976
                  mov r1.yz, c39.xxyw  // ::result<1,2>
                  mov r1.w, c37.y  // ::result<0>
                else

#line 988
                  add r5.xyz, r5.x, c7

#line 907
                  mov r6.xyz, c2  // ::Color<0,1,2>
                  mul r7.xyz, r6.xyxw, c36.zyww
                  add r7.xy, r7.y, r7.xzzw
                  mad r8.x, r6.z, c36.z, r7.x  // ::y<0>
                  mad r8.y, r6.z, -c36.z, r7.y  // ::co<0>

#line 930
                  mul r7.xy, r6.zyzw, c35

#line 915
                  dp3 r9.x, r6, c8  // ::y<0>

#line 918
                  add r7.zw, -c2.xyyz, c2.xyxy
                  cmp r7.zw, -r7_abs, c37.y, c37.x
                  add r2.w, r7.w, r7.z
                  dp3 r10.y, r6, c9  // ::i<0>
                  dp3 r10.z, r6, c10  // ::q<0>
                  cmp r10.yz, -r2.w, c37.y, r10  // ::i<0>, ::q<0>

#line 930
                  mad r8.zw, r6.x, c35.xyxz, -r7.xyxy  // ::cg<0>
                  mul r2.w, r6.y, c7.w
                  mad r9.y, r6.z, c35.w, r8.w  // ::u<0>
                  mad r2.w, r6.x, c9.w, -r2.w
                  mad r9.z, r6.z, -c10.w, r2.w  // ::v<0>

#line 991
                  cmp r6.xyz, -r5_abs.z, r9, c37.y  // ::result<0,1,2>
                  mov r10.x, r9.x
                  cmp r5.yzw, -r5_abs.y, r10.xxyz, r6.xxyz  // ::result<0,1,2>
                  cmp r1.yzw, -r5_abs.x, r8.xyzx, r5.xzwy  // ::result<1,2,0>
                endif
              endif
            endif
          endif
        endif
      endif

#line 49
      if_eq c0.x, r2.x

#line 54
        mov r3.xyz, c37.y
        mov r4.xyz, c18.xyyw  // ::result<0,1,2>
        mov r2.z, c37.y
      else

#line 82
        mov r5.x, c0.x  // ::Model<0>
        add r6, r5.x, c11

#line 73
        cmp r2.w, -r6_abs.z, c37.x, c37.y

#line 114
        add r5, r5.x, c40

#line 119
        cmp r7.xyz, -r5_abs.w, c41, c41.w  // ::result<0,1,2>
        cmp r7.xyz, -r5_abs.z, c26, r7  // ::result<0,1,2>
        cmp r5.yzw, -r5_abs.y, c39.xzww, r7.xxyz  // ::result<0,1,2>
        cmp r5.xyz, -r5_abs.x, c18.xyyw, r5.yzww  // ::result<0,1,2>
        cmp r5.xyz, -r6_abs.w, c18, r5  // ::result<0,1,2>
        cmp r5.xyz, -r6_abs.z, c26.wxxw, r5  // ::result<0,1,2>
        cmp r5.xyz, -r6_abs.y, c18, r5  // ::result<0,1,2>
        cmp r2.w, -r6_abs.y, c37.y, r2.w
        cmp r4.xyz, -r6_abs.x, c18.xyyw, r5  // ::result<0,1,2>
        cmp r2.z, -r6_abs.x, c37.y, r2.w
        mov r3.xyz, c26.wxxw  // ::Maximums<0,1,2>
      endif
    endif
    cmp r3.xyz, -r2.z, r4, r3  // ::Maximums<0,1,2>

#line 128
    mov r4.x, c0.x  // ::Model<0>
    add r5, r4.x, c42
    cmp r6, -r5_abs, c37.x, c37.y
    add r1.x, r1.x, r6.x
    cmp r1.x, -r1.x, c37.y, c37.x
    add r1.x, r6.y, r1.x
    cmp r1.x, -r1.x, c37.y, c37.x
    add r1.x, r6.z, r1.x
    cmp r1.x, -r1.x, c37.y, c37.x
    add r1.x, r6.w, r1.x
    cmp r1.x, -r1.x, c37.y, c37.x

#line 142
    add r7, r4.x, c43

#line 128
    cmp r2.zw, -r7_abs.xyxy, c37.x, c37.y
    add r1.x, r1.x, r2.z
    cmp r1.x, -r1.x, c37.y, c37.x
    add r1.x, r2.w, r1.x

#line 149
    add r2.z, r4.x, c7.z

#line 154
    cmp r4.yz, -r2_abs.z, c13.xxyw, c13.z  // ::result<1,2>
    cmp r4.yz, -r7_abs.w, -c26, r4  // ::result<1,2>
    cmp r4.yz, -r7_abs.z, -c4.y, r4  // ::result<1,2>
    cmp r4.yz, -r1.x, r4, c37.y  // ::result<1,2>

#line 1007
    abs r1.x, c1.x

#line 1010
    add r1.yz, r1, -r4
    add r3.yz, r3, -r4
    rcp r2.w, r3.y
    mul r6.y, r1.y, r2.w  // ::result<0>
    rcp r1.y, r3.z
    mul r6.z, r1.y, r1.z  // ::result<1>

#line 1017
    mov r8.xy, c42
    add r1.yz, r8.xxyw, c1.x

#line 1014
    rcp r2.w, r3.x
    mul r6.x, r1.w, r2.w  // ::result<0>

#line 1021
    cmp r3.xyz, -r1_abs.z, r6.xyyw, c37.y  // ::result<0,1,1>
    cmp r3.xyz, -r1_abs.y, r6.xzzw, r3  // ::result<0,1,1>
    cmp r3.xyz, -r1.x, r6.yzzw, r3  // ::result<0,1,1>

#line 1038
    add r1.z, c37.x, -v0.y  // ::z<0>

#line 41
    if_eq c0.x, r2.y

#line 46
      mov r6.xyz, c37.y
      mov r8.xyz, c37.x  // ::result<0,1,2>
      mov r1.w, c37.y
    else

#line 49
      if_eq c0.x, r2.x

#line 54
        mov r6.xyz, c37.y
        mov r8.xyz, c18.xyyw  // ::result<0,1,2>
        mov r1.w, c37.y
      else

#line 119
        cmp r9.xyz, -r2_abs.z, c41, c41.w  // ::result<1,2>
        cmp r9.xyz, -r7_abs.w, c26, r9  // ::result<0,1,2>
        cmp r9.xyz, -r7_abs.z, c39.zwww, r9  // ::result<0,1,2>
        cmp r9.xyz, -r7_abs.y, c18.xyyw, r9  // ::result<0,1,2>
        cmp r9.xyz, -r7_abs.x, c18, r9  // ::result<0,1,2>
        cmp r9.xyz, -r5_abs.w, c26.wxxw, r9  // ::result<0,1,2>
        cmp r9.xyz, -r5_abs.z, c18, r9  // ::result<0,1,2>
        cmp r2.w, -r5_abs.z, c37.y, r6.w
        cmp r8.xyz, -r5_abs.y, c18.xyyw, r9  // ::result<0,1,2>
        cmp r1.w, -r5_abs.y, c37.y, r2.w
        mov r6.xyz, c26.wxxw  // ::Maximums<0,1,2>
      endif
    endif
    cmp r5.xyz, -r1.w, r8, r6  // ::Maximums<0,1,2>

#line 1062
    mul r6.x, r1.z, r5.x  // ::input<0>

#line 1068
    mul r8.x, r3.x, r5.x  // ::input<0>

#line 1075
    lrp r6.yzw, r3.xxyz, r5.xyzy, r4.xyzy  // ::input<1,2,1>
    lrp r8.yz, r1.z, r5, r4  // ::input<1,2>
    mov r8.w, r6.z
    mov r3.xz, r8
    mov r3.y, r6.w
    cmp r1.yzw, -r1_abs.y, r8.xxyw, r3.xxyz  // ::input<0,1,2>
    cmp r0.xyz, -r1.x, r6, r1.yzww  // ::input<0,1,2>

#line 626
    if_eq c0.x, r2.y

#line 629
    else
      if_eq c0.x, r2.x

#line 164
        mul r1.xy, r0.yzzw, c18.w  // ::c<0>, ::g<0>

#line 172
        if_eq r1.x, c37.y

#line 221
          mov r0.xyz, r1.y  // ::FromHCG<0,1,2>
        else

#line 164
          mul r1.z, r0.x, c13.w  // ::h<0>

#line 172
          cmp r1.w, r0.x, c37.x, c37.z
          mul r1.z, r1.w, r1.z
          frc r1.z, r1.z
          mul r1.z, r1.z, r1.w
          mul r1.w, r1.z, c12.x  // ::hi<0>
          cmp r1.z, r1.z, c37.x, c37.z
          mul r2.x, r1.z, r1.w
          frc r2.x, r2.x
          mul r3.x, r1.z, r2.x  // ::v<0>

#line 177
          frc r2.y, r1.w
          add r1.w, r1.w, -r2.y  // ::fhi<0>

#line 203
          add r5, r1.w, c42

#line 214
          mov r3.yz, c37.xyxw
          mad r3.w, r1.z, -r2.x, c37.x
          cmp r2.xyw, -r5_abs.w, r3.xyzz, r3.zyzw  // ::pure<0,1,2>
          mad r4.yzw, r3.xxzy, c37.xzxx, c37.xxyy
          cmp r2.xyw, -r5_abs.z, r4.wyzz, r2  // ::pure<0,1,2>
          cmp r2.xyw, -r5_abs.y, r3.yzzx, r2  // ::pure<0,1,2>
          cmp r2.xyw, -r5_abs.x, r4.yzzw, r2  // ::pure<0,1,2>
          cmp r2.xyw, -r1_abs.w, r3.zxzy, r2  // ::pure<0,1,2>

#line 220
          lrp r0.xyz, r1.x, r2.xyww, r1.y  // ::result<0,1,2>
        endif

#line 634
      else
        if_eq r4.x, c6.x

#line 240
          mul r1.xyz, r0.yzxw, c22.xxyw  // ::_s<0>, ::_b<0>, ::SectorPosition<0>
          frc r1.w, r1.z
          add r1.z, -r1.w, r1.z  // ::SectorNumber<0>

#line 244
          mad r1.w, r0.x, c22.y, -r1.z  // ::FractionalSector<0>

#line 247
          mad r2.x, r0.y, -c22.x, c22.z
          mul r3.y, r1.y, r2.x  // ::p<0>
          mad r2.x, r1.x, -r1.w, c37.x
          mul r3.z, r1.y, r2.x  // ::q<0>
          add r1.w, -r1.w, c37.x
          mad r1.w, r1.x, -r1.w, c37.x
          mul r3.x, r1.w, r1.y  // ::t<0>

#line 276
          add r5, r1.z, c42

#line 282
          add r1.w, r1.z, -c38.w

#line 287
          mov r3.w, r1.y
          cmp r2.xyw, -r1_abs.w, r3.wyzz, c37.y  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r5_abs.w, r3, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r5_abs.z, r3.yzzw, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r5_abs.y, r3.ywzx, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r5_abs.x, r3.zwzy, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r1_abs.z, r3.wxzy, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r0.xyz, -r1_abs.x, r1.y, r2.xyww  // ::r<0>, ::g<0>, ::b<0>

#line 639
        else
          if_eq r4.x, c29.w

#line 23
            cmp r1.xy, r0.x, c14, c14.zwzw
            mul r1.y, r0.x, r1.y
            frc r1.y, r1.y
            mul r1.z, r1.y, r1.x  // Modulo::value<0>

#line 26
            mad r1.x, r1.x, r1.y, c26.w  // Modulo::value<0>
            cmp r1.x, r1.z, r1.z, r1.x  // Modulo::value<0>
            add r1.y, -r1.x, c26.w
            add r1.z, r1.x, -c26.w  // Modulo::value<0>
            cmp r1.x, r1.y, r1.x, r1.z  // Modulo::value<0>

#line 9
            min r1.yz, r0, c18

#line 304
            mul r2.xy, r1.yzzw, c22.xwzw
            cmp r1.yz, r1, r2.xxyw, c37.y  // ::s<0>, ::i<0>

#line 307
            if_lt r1.x, c17.x
              add r1.w, -r1.y, c37.x
              mul r1.w, r1.w, r1.z  // ::b<0>
              mad r2.x, r1.x, c17.y, c17.z
              frc r2.x, r2.x
              mad r2.x, r2.x, c15.x, c15.y
              sincos r3.x, r2.x
              mul r2.x, r1.y, r3.x
              mad r2.y, r1.x, -c15.z, c15.w
              mad r2.y, r2.y, c17.w, c17.z
              frc r2.y, r2.y
              mad r2.y, r2.y, c15.x, c15.y
              sincos r5.x, r2.y
              rcp r2.y, r5.x
              mad r2.x, r2.x, r2.y, c37.x
              mad r2.y, r3.x, -r2.y, c37.x
              mad r2.y, r1.y, r2.y, c37.x
              mul r2.xy, r1.z, r2  // ::r<0>, ::g<0>
            else
              if_lt r1.x, c16.x
                mad r2.w, r1.x, c16.y, c16.z  // ::h<0>
                add r3.x, -r1.y, c37.x
                mul r2.x, r1.z, r3.x  // ::r<0>
                mad r3.x, r2.w, c17.w, c17.z
                frc r3.x, r3.x
                mad r3.x, r3.x, c15.x, c15.y
                sincos r5.x, r3.x
                mul r3.x, r1.y, r5.x
                add r2.w, -r2.w, c15.w
                mad r2.w, r2.w, c17.w, c17.z
                frc r2.w, r2.w
                mad r2.w, r2.w, c15.x, c15.y
                sincos r6.x, r2.w
                rcp r2.w, r6.x
                mad r3.x, r3.x, r2.w, c37.x
                mul r2.y, r1.z, r3.x  // ::g<0>

#line 318
                mad r2.w, r5.x, -r2.w, c37.x
                mad r2.w, r1.y, r2.w, c37.x
                mul r1.w, r1.z, r2.w  // ::b<0>
              else

#line 322
                mad r1.x, r1.x, c16.y, c16.w  // ::h<0>
                add r2.w, -r1.y, c37.x
                mul r2.y, r1.z, r2.w  // ::g<0>
                mad r2.w, r1.x, c17.w, c17.z
                frc r2.w, r2.w
                mad r2.w, r2.w, c15.x, c15.y
                sincos r3.x, r2.w
                mul r2.w, r1.y, r3.x
                add r1.x, -r1.x, c15.w
                mad r1.x, r1.x, c17.w, c17.z
                frc r1.x, r1.x
                mad r1.x, r1.x, c15.x, c15.y
                sincos r5.x, r1.x
                rcp r1.x, r5.x
                mad r2.w, r2.w, r1.x, c37.x
                mul r1.w, r1.z, r2.w  // ::b<0>
                mad r1.x, r3.x, -r1.x, c37.x
                mad r1.x, r1.y, r1.x, c37.x
                mul r2.x, r1.x, r1.z  // ::r<0>
              endif
            endif

#line 9
            min r1.x, r2.x, c37.x
            max r0.x, r1.x, c37.y  // ::Coerce<0>
            min r1.x, r2.y, c37.x
            max r0.y, r1.x, c37.y  // ::Coerce<0>
            min r2.x, r1.w, c37.x
            max r0.z, r2.x, c37.y  // ::Coerce<0>

#line 644
          else
            if_eq r4.x, c6.y

#line 341
              if_lt -r0.y, c37.y

#line 337
                mul r1.x, r0.x, c22.y  // ::h<0>

#line 343
                mad r1.y, r0.z, c30.x, c30.y
                add r1.y, -r1_abs.y, c37.x
                mul r3.x, r0.y, r1.y  // ::chroma<0>
                cmp r1.yz, r0.x, c27.xxyw, c27.xzww
                mul r1.x, r1.z, r1.x
                frc r1.x, r1.x
                mad r1.x, r1.y, r1.x, c37.z
                add r1.x, -r1_abs.x, c37.x
                mul r3.y, r1.x, r3.x  // ::v<0>

#line 364
                add r1, -r0.x, c28

#line 370
                add r5, r0.x, -c28.wzyx

#line 376
                add r2.x, r0.x, c30.z
                add r2.yw, -r0.x, -c30.xwzz

#line 381
                cmp r2.yw, r2, -c37.x, -c37.y
                cmp r2.x, r2.x, r2.y, c37.y
                mov r3.z, c37.y
                cmp r4.yzw, r2.x, c37.y, r3.xxzy  // ::result<0,1,2>
                cmp r2.x, r5.w, r2.w, c37.y
                cmp r2.xyw, r2.x, r4.yzzw, r3.yzzx  // ::result<0,1,2>
                cmp r1, r1, -c37.x, -c37.y
                cmp r1.xyz, r5.zyxw, r1, c37.y
                cmp r2.xyw, r1.x, r2, r3.zyzx  // ::result<0,1,2>
                cmp r2.xyw, r1.y, r2, r3.zxzy  // ::result<0,1,2>
                cmp r1.xyz, r1.z, r2.xyww, r3.yxzw  // ::result<0,1,2>
                cmp r1.w, r0.x, r1.w, c37.y
                cmp r1.xyz, r1.w, r1, r3  // ::result<0,1,2>
                mad r1.w, r3.x, -c4.y, r0.z  // ::w<0>

#line 386
                add r0.xyz, r1.w, r1  // ::result<0,1,2>
              else

#line 391
                mov r0.xyz, r0.z  // ::result<0,1,2>
              endif

#line 649
            else
              if_eq r4.x, c38.w

#line 406
                mad r1.x, r0.y, -c22.x, c22.z  // ::minOverMax<0>
                if_lt -r1.x, c37.y

#line 411
                  if_lt r0.x, c29.z
                    mul r1.y, r0.x, c22.y  // ::h<0>
                    rcp r1.z, r1.x
                    add r1.w, r1.z, c37.z
                    mad r1.w, r1.y, r1.w, c37.x  // ::part<0>
                    mul r2.x, r1.z, r1.z
                    mul r1.w, r1.w, r1.w
                    mul r1.w, r1.w, c8.y
                    mad r1.w, r2.x, c8.x, r1.w
                    add r1.w, r1.w, c8.z
                    rsq r1.w, r1.w
                    mul r3.z, r0.z, r1.w  // ::b<0>
                    mul r3.x, r1.z, r3.z  // ::r<0>
                    mad r1.z, r3.z, r1.z, -r3.z
                    mad r3.y, r1.y, r1.z, r3.z  // ::g<0>
                  else
                    if_lt r0.x, c17.x

#line 422
                      mad r1.y, r0.x, -c20.x, c20.y
                      mul r1.y, r1.y, c12.x  // ::h<0>
                      rcp r1.z, r1.x
                      add r1.w, r1.z, c37.z
                      mad r1.w, r1.y, r1.w, c37.x  // ::part<0>
                      mul r2.x, r1.z, r1.z
                      mul r1.w, r1.w, r1.w
                      mul r1.w, r1.w, c8.x
                      mad r1.w, r2.x, c8.y, r1.w
                      add r1.w, r1.w, c8.z
                      rsq r1.w, r1.w
                      mul r3.z, r0.z, r1.w  // ::b<0>
                      mul r3.y, r1.z, r3.z  // ::g<0>
                      mad r1.z, r3.z, r1.z, -r3.z
                      mad r3.x, r1.y, r1.z, r3.z  // ::r<0>
                    else
                      if_lt r0.x, c19.w
                        mad r1.y, r0.x, c20.x, c20.z
                        mul r1.y, r1.y, c12.x  // ::h<0>
                        rcp r1.z, r1.x
                        add r1.w, r1.z, c37.z
                        mad r1.w, r1.y, r1.w, c37.x  // ::part<0>

#line 433
                        mul r2.x, r1.z, r1.z
                        mul r1.w, r1.w, r1.w
                        mul r1.w, r1.w, c8.z
                        mad r1.w, r2.x, c8.y, r1.w
                        add r1.w, r1.w, c8.x
                        rsq r1.w, r1.w
                        mul r3.x, r0.z, r1.w  // ::r<0>
                        mul r3.y, r1.z, r3.x  // ::g<0>
                        mad r1.z, r3.x, r1.z, -r3.x
                        mad r3.z, r1.y, r1.z, r3.x  // ::b<0>
                      else
                        if_lt r0.x, c16.x
                          mad r1.y, r0.x, -c20.x, c20.w
                          mul r1.y, r1.y, c12.x  // ::h<0>
                          rcp r1.z, r1.x
                          add r1.w, r1.z, c37.z
                          mad r1.w, r1.y, r1.w, c37.x  // ::part<0>
                          mul r2.x, r1.z, r1.z
                          mul r1.w, r1.w, r1.w
                          mul r1.w, r1.w, c8.y
                          mad r1.w, r2.x, c8.z, r1.w
                          add r1.w, r1.w, c8.x
                          rsq r1.w, r1.w
                          mul r3.x, r0.z, r1.w  // ::r<0>
                          mul r3.z, r1.z, r3.x  // ::b<0>

#line 444
                          mad r1.z, r3.x, r1.z, -r3.x
                          mad r3.y, r1.y, r1.z, r3.x  // ::g<0>
                        else
                          add r1.y, r0.x, c21.x
                          mad r1.z, r0.x, c21.y, c21.z
                          mul r1.z, r1.z, c12.x  // ::h<0>
                          rcp r1.x, r1.x
                          add r1.w, r1.x, c37.z
                          mad r2.x, r1.z, r1.w, c37.x  // ::part<0>
                          mul r2.y, r1.x, r1.x

#line 460
                          mul r2.yw, r2.y, c8.xzzx

#line 451
                          mul r2.x, r2.x, r2.x
                          mad r2.x, r2.x, c8.x, r2.y
                          add r2.x, r2.x, c8.y
                          rsq r2.x, r2.x
                          mul r5.y, r0.z, r2.x  // ::g<0>
                          mul r5.z, r1.x, r5.y  // ::b<0>
                          mad r2.x, r5.y, r1.x, -r5.y
                          mad r5.x, r1.z, r2.x, r5.y  // ::r<0>

#line 458
                          mad r1.z, r0.x, -c21.y, c21.w
                          mul r1.z, r1.z, c12.x  // ::h<0>
                          mad r1.w, r1.z, r1.w, c37.x  // ::part<0>
                          mul r1.w, r1.w, r1.w
                          mad r1.w, r1.w, c8.z, r2.w
                          add r1.w, r1.w, c8.y
                          rsq r1.w, r1.w
                          mul r6.y, r0.z, r1.w  // ::g<0>
                          mul r6.x, r1.x, r6.y  // ::r<0>
                          mad r1.x, r6.y, r1.x, -r6.y
                          mad r6.z, r1.z, r1.x, r6.y  // ::b<0>
                          cmp r3.xyz, r1.y, r6, r5  // ::r<0>, ::g<0>, ::b<0>
                        endif
                      endif
                    endif
                  endif
                else

#line 468
                  if_lt r0.x, c29.z
                    mul r1.x, r0.x, c22.y  // ::h<0>
                    mul r1.y, r0.z, r0.z
                    mul r1.z, r0.x, r1.x
                    mad r1.z, r1.z, c32.x, c32.y
                    rcp r1.z, r1.z
                    mul r1.y, r1.z, r1.y
                    rsq r1.y, r1.y
                    rcp r3.x, r1.y  // ::r<0>
                    mul r3.y, r1.x, r3.x  // ::g<0>
                    mov r3.z, c37.y
                  else
                    if_lt r0.x, c17.x
                      mad r1.x, r0.x, -c20.x, c20.y
                      mul r1.y, r1.x, c12.x  // ::h<0>

#line 479
                      mul r1.z, r0.z, r0.z
                      mul r1.x, r1.x, r1.y
                      mad r1.x, r1.x, c32.z, c32.w
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r1.z
                      rsq r1.x, r1.x
                      rcp r3.y, r1.x  // ::g<0>
                      mul r3.x, r1.y, r3.y  // ::r<0>
                      mov r3.z, c37.y
                    else

#line 502
                      mad r1.xy, r0.x, c25.x, c25.yzzw
                      mul r1.zw, r1.xyxy, c12.x  // ::h<0,0>

#line 487
                      mul r2.x, r0.z, r0.z

#line 503
                      mul r1.xy, r1, r1.zwzw
                      mad r1.xy, r1, c34, c34.zwzw

#line 487
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r2.x
                      rsq r1.x, r1.x
                      rcp r5.y, r1.x  // ::g<0>
                      mul r5.z, r1.z, r5.y  // ::b<0>

#line 510
                      mad r1.xz, r0.x, -c21_abs.y, c21_abs.zyww
                      mul r2.yw, r1.xxzz, c12.x  // ::h<0,0>
                      mul r1.xz, r1, r2.yyww
                      mad r1.xz, r1, c33.xyyw, c33.zyww

#line 495
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r2.x
                      rsq r1.x, r1.x
                      rcp r6.z, r1.x  // ::b<0>
                      mul r6.y, r2.y, r6.z  // ::g<0>

#line 500
                      add r4.yzw, r0.x, c31.xxyz

#line 503
                      rcp r1.x, r1.y
                      mul r1.x, r1.x, r2.x
                      rsq r1.x, r1.x
                      rcp r8.z, r1.x  // ::b<0>
                      mul r8.x, r1.w, r8.z  // ::r<0>

#line 511
                      rcp r1.x, r1.z
                      mul r1.x, r1.x, r2.x
                      rsq r1.x, r1.x
                      rcp r1.x, r1.x  // ::r<0>
                      mul r1.z, r2.w, r1.x  // ::b<0>
                      mov r1.y, c37.y
                      mov r8.y, c37.y
                      cmp r1.xyz, r4.w, r1, r8  // ::r<0>, ::g<0>, ::b<0>
                      mov r6.x, c37.y
                      cmp r1.xyz, r4.z, r1, r6  // ::r<0>, ::g<0>, ::b<0>
                      mov r5.x, c37.y
                      cmp r3.xyz, r4.y, r1, r5  // ::r<0>, ::g<0>, ::b<0>
                    endif
                  endif
                endif

#line 518
                add r1.xyz, r3, c4.y
                frc r2.xyw, r1.xyzz
                add r1.xyz, r1, -r2.xyww
                mul r1.xyz, r1, c22.w  // Coerce::input<0,0,0>

#line 9
                min r2.xyw, r1.xyzz, c37.x
                max r0.xyz, r2.xyww, c37.y  // ::Coerce<0,0,0>

#line 654
              else
                if_eq r4.x, c12.x

#line 540
                  mul r1.xyz, r0.yzxw, c22.xxyw  // ::wh<0>, ::bl<0>

#line 527
                  add r1.w, r1.y, r1.x  // ::ratio<0>

#line 534
                  add r2.x, -r1.w, c37.x
                  rcp r1.w, r1.w
                  mul r2.yw, r1.w, r1.xxzy  // ::wh<0>, ::bl<0>
                  cmp r3.xy, r2.x, r1, r2.ywzw  // ::wh<0>, ::bl<0>
                  frc r1.x, r1.z
                  add r1.x, -r1.x, r1.z  // ::i<0>

#line 576
                  add r4.xy, -r3.y, c37.x  // ::v<0>

#line 542
                  mad r1.y, r0.x, c22.y, -r1.x  // ::f<0>

#line 545
                  cmp r1.zw, r1.x, c27.xyxy, c27
                  mul r1.w, r1.w, r1.x
                  frc r1.w, r1.w
                  mul r1.z, r1.w, r1.z
                  add r1.w, -r1.y, c37.x  // ::f<0>
                  cmp r1.y, -r1_abs.z, r1.w, r1.y  // ::f<0>

#line 551
                  add r1.z, -r3.x, r4.x
                  mad r3.z, r1.y, r1.z, r3.x  // ::n<0>

#line 565
                  add r5, r1.x, c42

#line 569
                  add r1.x, r1.x, -c38.w

#line 576
                  cmp r4.zw, -r1_abs.x, r3.xyxz, r3.xyzx  // ::g<0>, ::b<0>
                  add r3.w, -r3.y, c37.x
                  cmp r1.xyz, -r5_abs.w, r3.zxww, r4.yzww  // ::r<0>, ::g<0>, ::b<0>
                  cmp r1.xyz, -r5_abs.z, r3.xzww, r1  // ::r<0>, ::g<0>, ::b<0>
                  cmp r1.xyz, -r5_abs.y, r3.xwzw, r1  // ::r<0>, ::g<0>, ::b<0>
                  cmp r0.xyz, -r5_abs.x, r3.zwxw, r1  // ::r<0>, ::g<0>, ::b<0>

#line 659
                else

#line 587
                  add r1.x, -r0.z, r0.x  // ::ycg<0>
                  add r3.x, r0.y, r1.x  // ::result<0>
                  add r3.y, r0.z, r0.x  // ::result<1>
                  add r3.z, -r0.y, r1.x  // ::result<2>

#line 599
                  mad r1.xy, r0.y, c23, r0.x
                  mad r1.xy, r0.z, c23.zwzw, r1  // ::r<0>, ::g<0>

#line 613
                  mad r4.xy, r0.yzzw, c24, r0.x  // ::result<0>

#line 600
                  mad r1.z, r0.z, c25.w, r4.x  // ::b<0>

#line 9
                  min r2.xy, r1, c37.x
                  max r5.xy, r2, c37.y  // ::Coerce<0,0>
                  min r2.x, r1.z, c37.x
                  max r5.z, r2.x, c37.y  // ::Coerce<0>

#line 614
                  mad r1.x, r0.y, -c31.w, r0.x
                  mad r4.z, r0.z, -c24.z, r1.x  // ::result<1>
                  mad r4.w, r0.y, c24.w, r0.x  // ::result<2>

#line 674
                  cmp r1.xyz, -r2_abs.z, r4.yzww, c37.y  // ::result<0,1,2>
                  cmp r1.xyz, -r7_abs.w, r5, r1  // ::result<0,1,2>
                  cmp r0.xyz, -r7_abs.z, r3, r1  // ::result<0,1,2>
                endif
              endif
            endif
          endif
        endif
      endif
    endif
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 805 instruction slots used (1 texture, 804 arithmetic)
