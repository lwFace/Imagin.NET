//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 Color;
//   float Component;
//   float Model;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Model        c0       1
//   Component    c1       1
//   Color        c2       1
//   input        s0       1
//

    ps_3_0
    def c3, 6, 0.166666672, -6, -0.166666672
    def c4, 2, 4, 360, 100
    def c5, 255, 0.5, -0.0187292993, 0.0742610022
    def c6, -0.212114394, 1.57072878, -2, 3.14159274
    def c7, 6.28318548, 3, 1, 0.333333343
    def c8, 359, 100, 255, 0
    def c9, -1, -2, -3, -4
    def c10, 359, 1, 0.00278551527, 0.0166666675
    def c11, 359, 0.00278551527, -359, -0.00278551527
    def c12, 0.666666687, 360, 0.5, 0.00999999978
    def c13, 240, 0.0174532942, -2.09439516, -4.18879032
    def c14, 6.28318548, -3.14159274, 0.0174532942, 1.04719758
    def c15, 120, 0.00277777785, 0.5, 0.159154937
    def c16, 0.00277777785, 0.333333343, 180, -0.333333343
    def c17, 5, 0.298999995, 0.587000012, 0.114
    def c18, 0.00277777785, 0.666666687, -300, -0.666666687
    def c19, 0.00999999978, 0.0166666675, 1, 0.00392156886
    def c20, 239.999985, 179.999985, 119.999992, 59.9999962
    def c21, 6, 2, 60, 3
    def c22, -180, -240, -300, 0
    def c23, 2, -1, -299.999969, -359.999969
    def c24, 57.2957764, 6, 4, 2
    def c25, 0.00277777785, 1, 0.0097833341, 0.298999995
    def c26, 3.52200007, 0.684000015, 0.114, 0.298999995
    def c27, 1.79399991, 0.587000012, 0.684000015, 0.114
    def c28, 2, 0.5, -2, -0.5
    def c29, 0, 1, -1, 0.166666672
    def c30, 0.00277777785, -0.333333343, -0.666666687, 1
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0

#line 799 "C:\Users\james\OneDrive\Development\Software\Library\Imagin.NET\Imagin.Common.WPF\Effects\ColorZ.fx"
    texld r0, v0, s0  // ::color<3>

#line 732
    abs r1.x, c0.x
    mov r2.xy, c29
    if_eq c0.x, r2.x

#line 735
      mov r3.xyz, c2  // ::result<0,1,2>
    else
      if_eq c0.x, r2.y

#line 537
        add r1.yzw, -c2.xzxy, c2.xyzx

#line 520
        cmp r2.zw, r1.w, c2.xyxy, c2.xyyx
        max r4.x, r2.z, c2.z  // ::maximum<0>
        min r4.y, c2.z, r2.w  // ::minimum<0>
        add r2.z, -r4.y, r4.x  // ::chroma<0>

#line 526
        add r2.w, r2.z, c29.z
        add r4.z, -r2.z, c29.y
        rcp r4.z, r4.z
        mul r4.y, r4.z, r4.y  // ::grayscale<0>

#line 535
        add r4.xz, r4.x, -c2.xyyw
        rcp r4.w, r2.z

#line 539
        mul r1.y, r1.y, r4.w

#line 533
        cmp r5.xy, r1.y, c3, c3.zwzw
        mul r1.y, r1.y, r5.y
        frc r1.y, r1.y
        mul r1.y, r1.y, r5.x  // ::hue<0>

#line 539
        mad r1.zw, r1, r4.w, c4.xyxy  // ::hue<0,0>
        cmp r1.z, -r4_abs.z, r1.z, r1.w  // ::hue<0>
        cmp r1.y, -r4_abs.x, r1.y, r1.z  // ::hue<0>
        mul r1.z, r1.y, c29.w  // ::hue<0>
        cmp r1.y, r1.y, c29.y, c29.z
        mul r1.z, r1.y, r1.z
        frc r1.z, r1.z
        mul r1.y, r1.z, r1.y  // ::hue<0>

#line 546
        mul r1.y, r1.y, c4.z
        cmp r3.x, -r2.z, c29.x, r1.y  // ::result<0>
        mul r3.y, r2.z, c4.w  // ::result<1>
        mul r1.y, r4.y, c4.w
        cmp r3.z, r2.w, c29.x, r1.y  // ::result<2>

#line 740
      else
        mov r4.x, c0.x  // ::Model<0>
        if_eq r4.x, c4.x

#line 579
          add r1.yz, -c2.xzxw, c2

#line 555
          cmp r2.zw, r1.y, c2.xyzy, c2.xyyz
          min r1.w, r2.z, c2.x  // ::minimum<0>
          max r4.y, c2.x, r2.w  // ::maximum<0>
          add r1.w, -r1.w, r4.y  // ::chroma<0>

#line 570
          rcp r2.z, r4.y
          mul r5.y, r1.w, r2.z  // ::_s<0>

#line 577
          add r2.zw, -r4.y, c2.xyxy

#line 574
          rcp r4.z, r1.w

#line 579
          mul r4.w, r1.y, r4.z  // ::_h<0>
          mad r5.zw, r1.xyyz, r4.z, c21.xyxy  // ::_h<0>

#line 575
          cmp r1.y, r1.y, r4.w, r5.z  // ::_h<0>

#line 582
          cmp r1.z, -r2_abs.w, r5.w, c29.x  // ::_h<0>
          cmp r1.y, -r2_abs.z, r1.y, r1.z  // ::_h<0>
          mul r5.x, r1.y, c21.z  // ::_h<0>
          cmp r3.xw, -r1_abs.w, c29.x, r5.xyzy  // ::_h<0>, ::_s<0>
          mul r3.z, r4.y, c4.w  // ::result<2>

#line 745
          mul r3.y, r3.w, c4.w
        else
          if_eq r4.x, c21.w

#line 593
            mov r5.xyz, c2  // ::Color<0,1,2>
            mul r1.yzw, r5.xxyz, c5.x  // ::_input<0,1,2>
            add r2.z, r1.z, r1.y
            mad r2.z, r5.z, c5.x, r2.z  // ::sum<0>
            rcp r2.w, r2.z
            mul r4.yzw, r1, r2.w  // ::r<0>, ::g<0>, ::b<0>

#line 606
            mad r1.yzw, r1.xyyz, r2.w, -r4.xzww

#line 602
            add r2.w, r1.z, r1.y
            mul r2.w, r2.w, c5.y

#line 606
            mul r1.yz, r1.xyww, r1
            add r1.y, r1.z, r1.y
            rsq r1.y, r1.y
            mul r1.y, r1.y, r2.w
            add r1.z, -r1_abs.y, c29.y
            rsq r1.z, r1.z
            rcp r1.z, r1.z
            mad r2.w, r1_abs.y, c5.z, c5.w
            mad r2.w, r2.w, r1_abs.y, c6.x
            mad r2.w, r2.w, r1_abs.y, c6.y
            mul r1.z, r1.z, r2.w
            mad r2.w, r1.z, c6.z, c6.w
            cmp r1.y, r1.y, c29.x, c29.y
            mad r1.y, r2.w, r1.y, r1.z  // ::h<0>

#line 611
            add r1.z, -r1.y, c7.x  // ::h<0>
            cmp r1.y, r1.w, r1.y, r1.z  // ::h<0>
            min r1.z, r4.w, r4.z
            min r2.w, r1.z, r4.y
            mad r1.z, r2.w, -c7.y, c7.z  // ::s<0>
            mul r3.z, r2.z, c7.w  // ::i<0>
            mul r3.x, r1.y, c24.x  // ::result<0>
            mul r3.y, r1.z, c4.w  // ::result<1>

#line 750
          else
            if_eq r4.x, c4.y

#line 648
              add r1.yzw, -c2.xzyx, c2.xyxz

#line 623
              cmp r2.zw, r1.z, c2.xyxy, c2.xyyx
              max r3.w, r2.z, c2.z  // ::maximum<0>
              min r4.y, c2.z, r2.w  // ::minimum<0>
              add r2.z, r3.w, -r4.y  // ::chroma<0>
              add r2.w, r3.w, r4.y
              mul r3.z, r2.w, c5.y  // ::l<0>

#line 632
              add r4.y, r2.w, c29.z
              rcp r4.z, r2.w
              mul r4.z, r2.z, r4.z
              add r2.w, -r2.w, c4.x
              rcp r2.w, r2.w
              mul r2.w, r2.w, r2.z
              cmp r5.y, r4.y, r2.w, r4.z  // ::s<0>

#line 647
              add r4.yzw, -r3.w, c2.xxzy

#line 638
              rcp r2.w, r2.z

#line 648
              mul r3.w, r1.y, r2.w  // ::h<0>
              mad r6.xyz, r1.yzww, r2.w, c24.yzww  // ::h<0,0>

#line 639
              cmp r1.y, r1.y, r3.w, r6.x  // ::h<0>

#line 648
              cmp r1.z, -r4_abs.w, r6.z, c29.x  // ::h<0>
              cmp r1.z, -r4_abs.z, r6.y, r1.z  // ::h<0>
              cmp r1.y, -r4_abs.y, r1.y, r1.z  // ::h<0>
              mul r5.x, r1.y, c21.z  // ::h<0>
              cmp r3.xy, -r2_abs.z, c29.x, r5  // ::h<0>, ::s<0>

#line 755
            else
              if_eq r4.x, c17.x

#line 663
                mov r4.xyz, c2  // ::Color<0,1,2>
                mul r1.yzw, r4.xxyz, c5.x  // ::_input<0,1,2>

#line 667
                mul r5.xyz, r1.yzww, r1.yzww
                mul r2.zw, r5.xyxy, c17.xyyz
                add r2.z, r2.w, r2.z
                mad r2.z, r5.z, c17.w, r2.z
                rsq r2.z, r2.z
                rcp r2.z, r2.z  // ::p<0>
                mad r4.xw, r4.x, c5.x, -r1.wyzz
                cmp r2.w, -r4_abs.x, c29.y, c29.x
                cmp r2.w, -r4_abs.w, r2.w, c29.x
                if_ne r2.w, -r2.w

#line 673
                  mov r5.xy, c29.x  // ::h<0>, ::s<0>
                else

#line 686
                  mad r5.zw, r4.xyyz, c5.x, -r1.xywz
                  mul r6.xy, r5.wzzw, c29.w

#line 681
                  rcp r2.w, r4.w
                  mad r7.y, r6.x, -r2.w, c29.y  // ::h<0>
                  rcp r2.w, r1.y

#line 686
                  rcp r3.w, r4.x
                  mul r7.x, r3.w, r6.y  // ::h<0>
                  mad r7.zw, r1, -r2.w, c29.y  // ::s<0,0>
                  cmp r6.xy, r5.w, r7.yzzw, r7.xwzw  // ::h<0>, ::s<0>
                  cmp r2.w, r4.x, -c29.y, -c29.x
                  cmp r2.w, r4.w, r2.w, c29.x
                  cmp r6.xy, r2.w, c29.x, r6  // ::h<0>, ::s<0>

#line 716
                  mul r6.zw, r4.xyxw, c29.w

#line 696
                  rcp r2.w, r5.z
                  mad r7.y, r6.z, -r2.w, c7.w  // ::h<0>
                  rcp r2.w, r1.z

#line 701
                  mad r4.yz, r4, c5.x, -r1.y

#line 711
                  mul r8.xy, r4.zyzw, c29.w

#line 701
                  rcp r3.w, r4.y
                  mad r7.x, r8.x, r3.w, c7.w  // ::h<0>
                  mad r7.zw, r1.xywy, -r2.w, c29.y  // ::s<0,0>
                  cmp r4.xw, r4.x, r7.yyzz, r7  // ::h<0>, ::s<0>

#line 719
                  cmp r7.xy, r5.zwzw, -c29.y, -c29.x
                  cmp r7.xy, r4.yzzw, r7, c29.x

#line 704
                  cmp r4.xw, r7.x, r6.xyzy, r4  // ::h<0>, ::s<0>

#line 711
                  rcp r2.w, r4.z
                  mad r8.y, r8.y, -r2.w, c12.x  // ::h<0>
                  rcp r1.w, r1.w

#line 716
                  rcp r2.w, r5.w
                  mad r8.x, r6.w, r2.w, c12.x  // ::h<0>
                  mad r8.zw, r1.xyyz, -r1.w, c29.y  // ::s<0,0>
                  cmp r1.yz, r4.y, r8, r8.xxww  // ::h<0>, ::s<0>
                  cmp r5.xy, r7.y, r4.xwzw, r1.yzzw  // ::h<0>, ::s<0>
                endif
                mul r3.y, r5.y, c4.w  // ::result<1>
                mad r1.y, r5.x, c12.y, c12.z
                frc r1.z, r1.y
                add r3.x, -r1.z, r1.y  // ::result<0>
                add r1.y, r2.z, c5.y
                frc r1.z, r1.y
                add r3.z, -r1.z, r1.y  // ::result<2>

#line 760
              else
                mov r3.xyz, c29.x  // ::result<0,1,2>
              endif
            endif
          endif
        endif
      endif
    endif

#line 79
    mov r4.x, c0.x  // ::Model<0>
    add r5, r4.x, c9

#line 87
    add r1.y, r4.x, -c17.x

#line 92
    cmp r1.yzw, -r1_abs.y, c8.xxyz, c8.w  // ::result<0,1,2>
    cmp r1.yzw, -r5_abs.w, c10.xxyy, r1  // ::result<0,1,2>
    cmp r1.yzw, -r5_abs.z, c8.xxyz, r1  // ::result<0,1,2>
    cmp r1.yzw, -r5_abs.y, c8.xxyy, r1  // ::result<0,1,2>
    cmp r1.yzw, -r5_abs.x, c8.xxyy, r1  // ::result<0,1,2>
    cmp r1.yzw, -r1.x, c29.y, r1  // ::result<0,1,2>
    cmp r2.z, -r5_abs.w, -c29.y, -c29.x
    cmp r2.z, -r5_abs.z, -c29.x, r2.z
    cmp r2.z, -r5_abs.y, -c29.x, r2.z
    cmp r2.z, -r5_abs.x, -c29.x, r2.z
    cmp r1.x, -r1.x, -c29.x, r2.z
    cmp r1.xyz, r1.x, r1.yzww, c10.xyyw  // ::Maximums<0,1,2>

#line 777
    abs r1.w, c1.x
    rcp r2.z, r1.y
    mul r5.y, r2.z, r3.y  // ::result<0>
    rcp r2.z, r1.z
    mul r5.z, r2.z, r3.z  // ::result<1>

#line 787
    mov r6.xy, c9
    add r2.zw, r6.xyxy, c1.x

#line 784
    rcp r3.y, r1.x
    mul r5.x, r3.y, r3.x  // ::result<0>

#line 791
    cmp r3, -r2_abs.w, r5.xyxy, c29.x  // ::result<0,1,0,1>
    cmp r3, -r2_abs.z, r5.xzxz, r3  // ::result<0,1,0,1>
    cmp r3, -r1.w, r5.yzyz, r3  // ::result<0,1,0,1>

#line 808
    add r2.w, c29.y, -v0.y  // ::z<0>

#line 848
    mul r3, r1.xyzy, r3.zxyw  // ::input<0,1,2,1>
    mul r1.xyz, r1, r2.w  // ::input<0,1,2>
    mov r5.xz, r3
    mov r5.y, r1.y
    mov r6.xy, r3.xwzw
    mov r6.z, r1.z
    cmp r4.yzw, -r2_abs.z, r5.xxyz, r6.xxyz  // ::input<0,1,2>
    mov r3.x, r1.x
    cmp r0.xyz, -r1.w, r3, r4.yzww  // ::input<0,1,2>

#line 481
    if_eq c0.x, r2.x

#line 484
    else
      if_eq c0.x, r2.y

#line 116
        mul r1.xy, r0.yzzw, c12.w  // ::c<0>, ::g<0>

#line 124
        if_eq r1.x, c29.x

#line 173
          mov r0.xyz, r1.y  // ::FromHCG<0,1,2>
        else

#line 116
          mul r1.z, r0.x, c10.z  // ::h<0>

#line 124
          cmp r1.w, r0.x, c29.y, c29.z
          mul r1.z, r1.w, r1.z
          frc r1.z, r1.z
          mul r1.z, r1.z, r1.w
          mul r1.w, r1.z, c3.x  // ::hi<0>
          cmp r1.z, r1.z, c29.y, c29.z
          mul r2.x, r1.z, r1.w
          frc r2.x, r2.x
          mul r3.x, r1.z, r2.x  // ::v<0>

#line 129
          frc r2.y, r1.w
          add r1.w, r1.w, -r2.y  // ::fhi<0>

#line 155
          add r5, r1.w, c9

#line 166
          mov r3.yz, c29.xxyw
          mad r3.w, r1.z, -r2.x, c29.y
          cmp r2.xyz, -r5_abs.w, r3, r3.zyww  // ::pure<0,1,2>
          mad r4.yzw, r3.xxzy, c29.xzyy, c29.xyxx
          cmp r2.xyz, -r5_abs.z, r4.wyzw, r2  // ::pure<0,1,2>
          cmp r2.xyz, -r5_abs.y, r3.yzxw, r2  // ::pure<0,1,2>
          cmp r2.xyz, -r5_abs.x, r4.yzww, r2  // ::pure<0,1,2>
          cmp r2.xyz, -r1_abs.w, r3.zxyw, r2  // ::pure<0,1,2>

#line 172
          lrp r0.xyz, r1.x, r2, r1.y  // ::result<0,1,2>
        endif

#line 489
      else
        if_eq r4.x, c4.x

#line 192
          mul r1.xyz, r0.yzxw, c19.xxyw  // ::_s<0>, ::_b<0>, ::SectorPosition<0>
          frc r1.w, r1.z
          add r1.z, -r1.w, r1.z  // ::SectorNumber<0>

#line 196
          mad r1.w, r0.x, c10.w, -r1.z  // ::FractionalSector<0>

#line 199
          mad r2.x, r0.y, -c19.x, c19.z
          mul r2.y, r1.y, r2.x  // ::p<0>
          mad r3.x, r1.x, -r1.w, c29.y
          mul r2.z, r1.y, r3.x  // ::q<0>
          add r1.w, -r1.w, c29.y
          mad r1.w, r1.x, -r1.w, c29.y
          mul r2.x, r1.w, r1.y  // ::t<0>

#line 228
          add r3, r1.z, c9

#line 234
          add r1.w, r1.z, -c17.x

#line 239
          mov r2.w, r1.y
          cmp r4.yzw, -r1_abs.w, r2.xwyz, c29.x  // ::r<0>, ::g<0>, ::b<0>
          cmp r4.yzw, -r3_abs.w, r2.xxyw, r4  // ::r<0>, ::g<0>, ::b<0>
          cmp r4.yzw, -r3_abs.z, r2, r4  // ::r<0>, ::g<0>, ::b<0>
          cmp r3.yzw, -r3_abs.y, r2.xywx, r4  // ::r<0>, ::g<0>, ::b<0>
          cmp r3.xyz, -r3_abs.x, r2.zwyw, r3.yzww  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyz, -r1_abs.z, r2.wxyw, r3  // ::r<0>, ::g<0>, ::b<0>
          cmp r0.xyz, -r1_abs.x, r1.y, r2  // ::r<0>, ::g<0>, ::b<0>

#line 494
        else
          if_eq r4.x, c21.w

#line 29
            cmp r1.xy, r0.x, c11, c11.zwzw
            mul r1.y, r0.x, r1.y
            frc r1.y, r1.y
            mul r1.z, r1.y, r1.x  // Modulo::value<0>

#line 32
            mad r1.x, r1.x, r1.y, c8.x  // Modulo::value<0>
            cmp r1.x, r1.z, r1.z, r1.x  // Modulo::value<0>
            add r1.y, -r1.x, c8.x
            add r1.z, r1.x, -c8.x  // Modulo::value<0>
            cmp r1.x, r1.y, r1.x, r1.z  // Modulo::value<0>

#line 15
            min r1.yz, r0, c8

#line 256
            mul r2.xy, r1.yzzw, c19.xwzw
            cmp r1.yz, r1, r2.xxyw, c29.x  // ::s<0>, ::i<0>

#line 259
            if_lt r1.x, c15.x
              add r1.w, -r1.y, c29.y
              mul r1.w, r1.w, r1.z  // ::b<0>
              mad r2.x, r1.x, c15.y, c15.z
              frc r2.x, r2.x
              mad r2.x, r2.x, c14.x, c14.y
              sincos r3.x, r2.x
              mul r2.x, r1.y, r3.x
              mad r2.y, r1.x, -c14.z, c14.w
              mad r2.y, r2.y, c15.w, c15.z
              frc r2.y, r2.y
              mad r2.y, r2.y, c14.x, c14.y
              sincos r5.x, r2.y
              rcp r2.y, r5.x
              mad r2.x, r2.x, r2.y, c29.y
              mad r2.y, r3.x, -r2.y, c29.y
              mad r2.y, r1.y, r2.y, c29.y
              mul r2.xy, r1.z, r2  // ::r<0>, ::g<0>
            else
              if_lt r1.x, c13.x
                mad r2.z, r1.x, c13.y, c13.z  // ::h<0>
                add r2.w, -r1.y, c29.y
                mul r2.x, r1.z, r2.w  // ::r<0>
                mad r2.w, r2.z, c15.w, c15.z
                frc r2.w, r2.w
                mad r2.w, r2.w, c14.x, c14.y
                sincos r3.x, r2.w
                mul r2.w, r1.y, r3.x
                add r2.z, -r2.z, c14.w
                mad r2.z, r2.z, c15.w, c15.z
                frc r2.z, r2.z
                mad r2.z, r2.z, c14.x, c14.y
                sincos r5.x, r2.z
                rcp r2.z, r5.x
                mad r2.w, r2.w, r2.z, c29.y
                mul r2.y, r1.z, r2.w  // ::g<0>

#line 270
                mad r2.z, r3.x, -r2.z, c29.y
                mad r2.z, r1.y, r2.z, c29.y
                mul r1.w, r1.z, r2.z  // ::b<0>
              else

#line 274
                mad r1.x, r1.x, c13.y, c13.w  // ::h<0>
                add r2.z, -r1.y, c29.y
                mul r2.y, r1.z, r2.z  // ::g<0>
                mad r2.z, r1.x, c15.w, c15.z
                frc r2.z, r2.z
                mad r2.z, r2.z, c14.x, c14.y
                sincos r3.x, r2.z
                mul r2.z, r1.y, r3.x
                add r1.x, -r1.x, c14.w
                mad r1.x, r1.x, c15.w, c15.z
                frc r1.x, r1.x
                mad r1.x, r1.x, c14.x, c14.y
                sincos r5.x, r1.x
                rcp r1.x, r5.x
                mad r2.z, r2.z, r1.x, c29.y
                mul r1.w, r1.z, r2.z  // ::b<0>
                mad r1.x, r3.x, -r1.x, c29.y
                mad r1.x, r1.y, r1.x, c29.y
                mul r2.x, r1.x, r1.z  // ::r<0>
              endif
            endif

#line 15
            min r1.x, r2.x, c29.y
            max r0.x, r1.x, c29.x  // ::Coerce<0>
            min r1.x, r2.y, c29.y
            max r0.y, r1.x, c29.x  // ::Coerce<0>
            min r2.x, r1.w, c29.y
            max r0.z, r2.x, c29.x  // ::Coerce<0>

#line 499
          else
            if_eq r4.x, c4.y

#line 293
              if_lt -r0.y, c29.x

#line 289
                mul r1.x, r0.x, c10.w  // ::h<0>

#line 295
                mad r1.y, r0.z, c23.x, c23.y
                add r1.y, -r1_abs.y, c29.y
                mul r2.x, r0.y, r1.y  // ::chroma<0>
                cmp r1.yz, r0.x, c28.xxyw, c28.xzww
                mul r1.x, r1.z, r1.x
                frc r1.x, r1.x
                mad r1.x, r1.y, r1.x, c29.z
                add r1.x, -r1_abs.x, c29.y
                mul r2.y, r1.x, r2.x  // ::v<0>

#line 316
                add r1, -r0.x, c20

#line 322
                add r3, r0.x, -c20.wzyx

#line 328
                add r2.w, r0.x, c23.z
                add r4.yz, -r0.x, -c23.xwzw

#line 333
                cmp r4.yz, r4, -c29.y, -c29.x
                cmp r2.w, r2.w, r4.y, c29.x
                mov r2.z, c29.x
                cmp r5.xyz, r2.w, c29.x, r2.xzyw  // ::result<0,1,2>
                cmp r2.w, r3.w, r4.z, c29.x
                cmp r4.yzw, r2.w, r5.xxyz, r2.xyzx  // ::result<0,1,2>
                cmp r1, r1, -c29.y, -c29.x
                cmp r1.xyz, r3.zyxw, r1, c29.x
                cmp r3.xyz, r1.x, r4.yzww, r2.zyxw  // ::result<0,1,2>
                cmp r3.xyz, r1.y, r3, r2.zxyw  // ::result<0,1,2>
                cmp r1.xyz, r1.z, r3, r2.yxzw  // ::result<0,1,2>
                cmp r1.w, r0.x, r1.w, c29.x
                cmp r1.xyz, r1.w, r1, r2  // ::result<0,1,2>
                mad r1.w, r2.x, -c5.y, r0.z  // ::w<0>

#line 338
                add r0.xyz, r1.w, r1  // ::result<0,1,2>
              else

#line 343
                mov r0.xyz, r0.z  // ::result<0,1,2>
              endif

#line 504
            else
              if_eq r4.x, c17.x

#line 358
                mad r1.x, r0.y, -c19.x, c19.z  // ::minOverMax<0>
                if_lt -r1.x, c29.x

#line 363
                  if_lt r0.x, c21.z
                    mul r1.y, r0.x, c10.w  // ::h<0>
                    rcp r1.z, r1.x
                    add r1.w, r1.z, c29.z
                    mad r1.w, r1.y, r1.w, c29.y  // ::part<0>
                    mul r2.x, r1.z, r1.z
                    mul r1.w, r1.w, r1.w
                    mul r1.w, r1.w, c17.z
                    mad r1.w, r2.x, c17.y, r1.w
                    add r1.w, r1.w, c17.w
                    rsq r1.w, r1.w
                    mul r2.z, r0.z, r1.w  // ::b<0>
                    mul r2.x, r1.z, r2.z  // ::r<0>
                    mad r1.z, r2.z, r1.z, -r2.z
                    mad r2.y, r1.y, r1.z, r2.z  // ::g<0>
                  else
                    if_lt r0.x, c15.x

#line 374
                      mad r1.y, r0.x, -c16.x, c16.y
                      mul r1.y, r1.y, c3.x  // ::h<0>
                      rcp r1.z, r1.x
                      add r1.w, r1.z, c29.z
                      mad r1.w, r1.y, r1.w, c29.y  // ::part<0>
                      mul r2.w, r1.z, r1.z
                      mul r1.w, r1.w, r1.w
                      mul r1.w, r1.w, c17.y
                      mad r1.w, r2.w, c17.z, r1.w
                      add r1.w, r1.w, c17.w
                      rsq r1.w, r1.w
                      mul r2.z, r0.z, r1.w  // ::b<0>
                      mul r2.y, r1.z, r2.z  // ::g<0>
                      mad r1.z, r2.z, r1.z, -r2.z
                      mad r2.x, r1.y, r1.z, r2.z  // ::r<0>
                    else
                      if_lt r0.x, c16.z
                        mad r1.y, r0.x, c16.x, c16.w
                        mul r1.y, r1.y, c3.x  // ::h<0>
                        rcp r1.z, r1.x
                        add r1.w, r1.z, c29.z
                        mad r1.w, r1.y, r1.w, c29.y  // ::part<0>

#line 385
                        mul r2.w, r1.z, r1.z
                        mul r1.w, r1.w, r1.w
                        mul r1.w, r1.w, c17.w
                        mad r1.w, r2.w, c17.z, r1.w
                        add r1.w, r1.w, c17.y
                        rsq r1.w, r1.w
                        mul r2.x, r0.z, r1.w  // ::r<0>
                        mul r2.y, r1.z, r2.x  // ::g<0>
                        mad r1.z, r2.x, r1.z, -r2.x
                        mad r2.z, r1.y, r1.z, r2.x  // ::b<0>
                      else
                        if_lt r0.x, c13.x
                          mad r1.y, r0.x, -c18.x, c18.y
                          mul r1.y, r1.y, c3.x  // ::h<0>
                          rcp r1.z, r1.x
                          add r1.w, r1.z, c29.z
                          mad r1.w, r1.y, r1.w, c29.y  // ::part<0>
                          mul r2.w, r1.z, r1.z
                          mul r1.w, r1.w, r1.w
                          mul r1.w, r1.w, c17.z
                          mad r1.w, r2.w, c17.w, r1.w
                          add r1.w, r1.w, c17.y
                          rsq r1.w, r1.w
                          mul r2.x, r0.z, r1.w  // ::r<0>
                          mul r2.z, r1.z, r2.x  // ::b<0>

#line 396
                          mad r1.z, r2.x, r1.z, -r2.x
                          mad r2.y, r1.y, r1.z, r2.x  // ::g<0>
                        else
                          add r1.y, r0.x, c18.z
                          mad r1.z, r0.x, c18.x, c18.w
                          mul r1.z, r1.z, c3.x  // ::h<0>
                          rcp r1.x, r1.x
                          add r1.w, r1.x, c29.z
                          mad r2.w, r1.z, r1.w, c29.y  // ::part<0>
                          mul r3.x, r1.x, r1.x

#line 412
                          mul r3.xy, r3.x, c17.wyzw

#line 403
                          mul r2.w, r2.w, r2.w
                          mad r2.w, r2.w, c17.y, r3.x
                          add r2.w, r2.w, c17.z
                          rsq r2.w, r2.w
                          mul r4.y, r0.z, r2.w  // ::g<0>
                          mul r4.z, r1.x, r4.y  // ::b<0>
                          mad r2.w, r4.y, r1.x, -r4.y
                          mad r4.x, r1.z, r2.w, r4.y  // ::r<0>

#line 410
                          mad r1.z, r0.x, -c25.x, c25.y
                          mul r1.z, r1.z, c3.x  // ::h<0>
                          mad r1.w, r1.z, r1.w, c29.y  // ::part<0>
                          mul r1.w, r1.w, r1.w
                          mad r1.w, r1.w, c17.w, r3.y
                          add r1.w, r1.w, c17.z
                          rsq r1.w, r1.w
                          mul r3.y, r0.z, r1.w  // ::g<0>
                          mul r3.x, r1.x, r3.y  // ::r<0>
                          mad r1.x, r3.y, r1.x, -r3.y
                          mad r3.z, r1.z, r1.x, r3.y  // ::b<0>
                          cmp r2.xyz, r1.y, r3, r4  // ::r<0>, ::g<0>, ::b<0>
                        endif
                      endif
                    endif
                  endif
                else

#line 420
                  if_lt r0.x, c21.z
                    mul r1.x, r0.x, c10.w  // ::h<0>
                    mul r1.y, r0.z, r0.z
                    mul r1.z, r0.x, r1.x
                    mad r1.z, r1.z, c25.z, c25.w
                    rcp r1.z, r1.z
                    mul r1.y, r1.z, r1.y
                    rsq r1.y, r1.y
                    rcp r2.x, r1.y  // ::r<0>
                    mul r2.y, r1.x, r2.x  // ::g<0>
                    mov r2.z, c29.x
                  else
                    if_lt r0.x, c15.x
                      mad r1.x, r0.x, -c16.x, c16.y
                      mul r1.y, r1.x, c3.x  // ::h<0>

#line 431
                      mul r1.z, r0.z, r0.z
                      mul r1.x, r1.x, r1.y
                      mad r1.x, r1.x, c27.x, c27.y
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r1.z
                      rsq r1.x, r1.x
                      rcp r2.y, r1.x  // ::g<0>
                      mul r2.x, r1.y, r2.y  // ::r<0>
                      mov r2.z, c29.x
                    else

#line 454
                      mad r1.xy, r0.x, c30.x, c30.yzzw
                      mul r1.zw, r1.xyxy, c3.x  // ::h<0,0>

#line 439
                      mul r2.w, r0.z, r0.z

#line 455
                      mul r1.xy, r1, r1.zwzw
                      mad r1.xy, r1, c27.zxzw, c27.ywzw

#line 439
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r2.w
                      rsq r1.x, r1.x
                      rcp r3.y, r1.x  // ::g<0>
                      mul r3.z, r1.z, r3.y  // ::b<0>

#line 462
                      mad r1.xz, r0.x, -c30_abs.x, c30_abs.zyww
                      mul r4.xy, r1.xzzw, c3.x  // ::h<0,0>
                      mul r1.xz, r1, r4.xyyw
                      mad r1.xz, r1, c26.xyyw, c26.zyww

#line 447
                      rcp r1.x, r1.x
                      mul r1.x, r1.x, r2.w
                      rsq r1.x, r1.x
                      rcp r5.z, r1.x  // ::b<0>
                      mul r5.y, r4.x, r5.z  // ::g<0>

#line 452
                      add r4.xzw, r0.x, c22.xyyz

#line 455
                      rcp r1.x, r1.y
                      mul r1.x, r1.x, r2.w
                      rsq r1.x, r1.x
                      rcp r6.z, r1.x  // ::b<0>
                      mul r6.x, r1.w, r6.z  // ::r<0>

#line 463
                      rcp r1.x, r1.z
                      mul r1.x, r1.x, r2.w
                      rsq r1.x, r1.x
                      rcp r1.x, r1.x  // ::r<0>
                      mul r1.z, r4.y, r1.x  // ::b<0>
                      mov r1.y, c29.x
                      mov r6.y, c29.x
                      cmp r1.xyz, r4.w, r1, r6  // ::r<0>, ::g<0>, ::b<0>
                      mov r5.x, c29.x
                      cmp r1.xyz, r4.z, r1, r5  // ::r<0>, ::g<0>, ::b<0>
                      mov r3.x, c29.x
                      cmp r2.xyz, r4.x, r1, r3  // ::r<0>, ::g<0>, ::b<0>
                    endif
                  endif
                endif

#line 470
                add r1.xyz, r2, c5.y
                frc r2.xyz, r1
                add r1.xyz, r1, -r2
                mul r1.xyz, r1, c19.w  // Coerce::input<0,0,0>

#line 15
                min r2.xyz, r1, c29.y
                max r0.xyz, r2, c29.x  // ::Coerce<0,0,0>

#line 509
              else
                mov r0.xyz, c29.x  // ::result<0,1,2>
              endif
            endif
          endif
        endif
      endif
    endif
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 661 instruction slots used (1 texture, 660 arithmetic)
