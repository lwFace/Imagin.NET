//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float Component;
//   float Model;
//   float Value;
//   sampler2D input;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   Model        c0       1
//   Component    c1       1
//   Value        c2       1
//   input        s0       1
//

    ps_3_0
    def c3, -1, -2, -3, -4
    def c4, 359, 0.00278551527, -359, -0.00278551527
    def c5, 0.00999999978, 0.0166666675, 0.00392156886, 120
    def c6, 0.00277777785, 0.5, 6.28318548, -3.14159274
    def c7, 0.0174532942, 1.04719758, 0.159154937, 0.5
    def c8, 240, 0.0174532942, -2.09439516, -4.18879032
    def c9, -1, 1, -5, 359
    def c10, -1, -0, 0.00999999978, 0.00278551527
    def c11, 0.00277777785, 0.333333343, 180, -0.333333343
    def c12, 60, 0.587000012, 0.298999995, 0.114
    def c13, 0.00277777785, 0.666666687, -300, -0.666666687
    def c14, 359, 100, 255, 0
    def c15, 239.999985, 179.999985, 119.999992, 59.9999962
    def c16, 2, -1, -299.999969, -359.999969
    def c17, -180, -240, -300, 0
    def c18, 0.00277777785, 1, 0.0097833341, 0.298999995
    def c19, 3.52200007, 0.684000015, 0.114, 0.298999995
    def c20, 1.79399991, 0.587000012, 0.684000015, 0.114
    def c21, 2, 0.5, -2, -0.5
    def c22, 6, -1, 1, 0
    def c23, 0.00277777785, -0.333333343, -0.666666687, 1
    dcl_texcoord v0.xy  // uv<0,1>
    dcl_2d s0

#line 474 "C:\Users\james\OneDrive\Development\Software\Library\Imagin.NET\Imagin.Common.WPF\Effects\ColorXY.fx"
    texld r0, v0, s0  // ::Color<3>

#line 494
    abs r1.x, c1.x

#line 500
    mov r2.xyz, c9
    add r1.y, r2.x, c1.x

#line 511
    mov r3.x, c2.x
    add r3.z, c9.y, -v0.y
    cmp r4.yz, -r1_abs.y, r3.xxzw, r3.xzxw  // ::input<1,2>
    mov r3.y, v0.x
    mov r4.x, v0.x
    cmp r1.xyz, -r1.x, r3, r4  // ::input<0,1,2>

#line 41
    abs r1.w, c0.x

#line 73
    mov r3, c3
    add r4, r3, c0.x

#line 82
    add r2.x, r2.z, c0.x

#line 87
    cmp r5.xyz, -r2_abs.x, c14, c14.w  // ::result<0,1,2>
    cmp r5.xyz, -r4_abs.w, c9.wyyw, r5  // ::result<0,1,2>
    cmp r5.xyz, -r4_abs.z, c14, r5  // ::result<0,1,2>
    cmp r5.xyz, -r4_abs.y, c14.xyyw, r5  // ::result<0,1,2>
    cmp r5.xyz, -r4_abs.x, c14.xyyw, r5  // ::result<0,1,2>
    cmp r5.xyz, -r1.w, c9.y, r5  // ::result<0,1,2>
    cmp r2.x, -r4_abs.w, c10.x, c10.y
    cmp r2.x, -r4_abs.z, -c14.w, r2.x
    cmp r2.x, -r4_abs.y, -c14.w, r2.x
    cmp r2.x, -r4_abs.x, -c14.w, r2.x
    cmp r1.w, -r1.w, -c14.w, r2.x
    cmp r4.xyz, r1.w, r5, c9.wyyw  // ::Maximums<0,1,2>

#line 518
    mul r0.xyz, r1, r4  // ::input<0,1,2>

#line 521
    mov r1.w, c14.w
    if_eq c0.x, r1.w

#line 524
    else
      if_eq c0.x, r2.y

#line 111
        mul r1.yz, r0, c10.z  // ::c<0>, ::g<0>

#line 119
        if_eq r1.y, c14.w

#line 168
          mov r0.xyz, r1.z  // ::FromHCG<0,1,2>
        else

#line 111
          mul r1.w, r0.x, c10.w  // ::h<0>

#line 119
          cmp r2.x, r0.x, c9.y, c9.x
          mul r1.w, r1.w, r2.x
          frc r1.w, r1.w
          mul r1.w, r1.w, r2.x
          mul r2.x, r1.w, c22.x  // ::hi<0>
          cmp r1.w, r1.w, c9.y, c9.x
          mul r2.y, r1.w, r2.x

#line 124
          frc r2.yw, r2.xyzx

#line 120
          mul r5.x, r1.w, r2.y  // ::v<0>

#line 124
          add r2.x, -r2.w, r2.x  // ::fhi<0>

#line 150
          add r6, r2.x, c3

#line 161
          mov r5.yz, -c10.xyxw
          mad r5.w, r1.w, -r2.y, c9.y
          cmp r4.yzw, -r6_abs.w, r5.xxyz, r5.xzyw  // ::pure<0,1,2>
          mad r7.xyz, r5.xzyw, c22.yzzw, c22.zwww
          cmp r4.yzw, -r6_abs.z, r7.xzxy, r4  // ::pure<0,1,2>
          cmp r4.yzw, -r6_abs.y, r5.xyzx, r4  // ::pure<0,1,2>
          cmp r4.yzw, -r6_abs.x, r7.xxyz, r4  // ::pure<0,1,2>
          cmp r2.xyw, -r2_abs.x, r5.zxzy, r4.yzzw  // ::pure<0,1,2>

#line 167
          lrp r0.xyz, r1.y, r2.xyww, r1.z  // ::result<0,1,2>
        endif

#line 529
      else
        if_eq c0.x, -r3.y

#line 187
          mul r1.yzw, r0.xyzx, c5.xxxy  // ::_s<0>, ::_b<0>, ::SectorPosition<0>
          frc r2.x, r1.w
          add r1.w, r1.w, -r2.x  // ::SectorNumber<0>

#line 191
          mad r2.x, r0.x, c5.y, -r1.w  // ::FractionalSector<0>

#line 194
          mad r2.y, r0.y, -c10_abs.z, c10_abs.x
          mul r5.y, r1.z, r2.y  // ::p<0>
          mad r2.y, r1.y, -r2.x, c9.y
          add r2.x, -r2.x, c9.y
          mad r2.x, r1.y, -r2.x, c9.y
          mul r5.xz, r1.z, r2.xyyw  // ::t<0>, ::q<0>

#line 223
          add r6, r1.w, c3

#line 229
          add r2.x, r1.w, c9.z

#line 234
          mov r5.w, r1.z
          cmp r2.xyw, -r2_abs.x, r5.wyzz, c14.w  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r6_abs.w, r5, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r6_abs.z, r5.yzzw, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r6_abs.y, r5.ywzx, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r6_abs.x, r5.zwzy, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r2.xyw, -r1_abs.w, r5.wxzy, r2  // ::r<0>, ::g<0>, ::b<0>
          cmp r0.xyz, -r1_abs.y, r1.z, r2.xyww  // ::r<0>, ::g<0>, ::b<0>

#line 534
        else
          if_eq c0.x, -r3.z

#line 23
            cmp r1.yz, r0.x, c4.xxyw, c4.xzww
            mul r1.z, r0.x, r1.z
            frc r1.z, r1.z
            mul r1.w, r1.z, r1.y  // Modulo::value<0>

#line 26
            mad r1.y, r1.y, r1.z, c9.w  // Modulo::value<0>
            cmp r1.y, r1.w, r1.w, r1.y  // Modulo::value<0>
            add r1.z, -r1.y, c9.w
            add r1.w, r1.y, -c9.w  // Modulo::value<0>
            cmp r1.y, r1.z, r1.y, r1.w  // Modulo::value<0>

#line 9
            min r1.zw, r0.xyyz, c14.xyyz

#line 251
            mul r2.xy, r1.zwzw, c5.xzzw
            cmp r1.zw, r1, r2.xyxy, c14.w  // ::s<0>, ::i<0>

#line 254
            if_lt r1.y, c5.w
              add r2.x, -r1.z, c9.y
              mad r2.y, r1.y, c6.x, c6.y
              frc r2.y, r2.y
              mad r2.y, r2.y, c6.z, c6.w
              sincos r5.x, r2.y
              mul r2.y, r1.z, r5.x
              mad r2.w, r1.y, -c7.x, c7.y
              mad r2.w, r2.w, c7.z, c7.w
              frc r2.w, r2.w
              mad r2.w, r2.w, c6.z, c6.w
              sincos r6.x, r2.w
              rcp r2.w, r6.x
              mad r2.y, r2.y, r2.w, c9.y
              mad r2.w, r5.x, -r2.w, c9.y
              mad r2.w, r1.z, r2.w, c9.y
              mul r2.xyw, r1.w, r2  // ::b<0>, ::r<0>, ::g<0>

#line 259
            else
              if_lt r1.y, c8.x
                mad r3.x, r1.y, c8.y, c8.z  // ::h<0>
                add r3.y, -r1.z, c9.y
                mul r2.y, r1.w, r3.y  // ::r<0>
                mad r3.y, r3.x, c7.z, c7.w
                frc r3.y, r3.y
                mad r3.y, r3.y, c6.z, c6.w
                sincos r5.x, r3.y
                mul r3.y, r1.z, r5.x
                add r3.x, -r3.x, c7.y
                mad r3.x, r3.x, c7.z, c7.w
                frc r3.x, r3.x
                mad r3.x, r3.x, c6.z, c6.w
                sincos r6.x, r3.x
                rcp r3.x, r6.x
                mad r3.y, r3.y, r3.x, c9.y
                mad r3.x, r5.x, -r3.x, c9.y
                mad r3.x, r1.z, r3.x, c9.y
                mul r2.xw, r1.w, r3.xyzy  // ::b<0>, ::g<0>
              else

#line 269
                mad r1.y, r1.y, c8.y, c8.w  // ::h<0>
                add r3.x, -r1.z, c9.y
                mul r2.w, r1.w, r3.x  // ::g<0>
                mad r3.x, r1.y, c7.z, c7.w
                frc r3.x, r3.x
                mad r3.x, r3.x, c6.z, c6.w
                sincos r5.x, r3.x
                mul r3.x, r1.z, r5.x
                add r1.y, -r1.y, c7.y
                mad r1.y, r1.y, c7.z, c7.w
                frc r1.y, r1.y
                mad r1.y, r1.y, c6.z, c6.w
                sincos r6.x, r1.y
                rcp r1.y, r6.x
                mad r3.x, r3.x, r1.y, c9.y
                mul r2.x, r1.w, r3.x  // ::b<0>
                mad r1.y, r5.x, -r1.y, c9.y
                mad r1.y, r1.z, r1.y, c9.y
                mul r2.y, r1.y, r1.w  // ::r<0>
              endif
            endif

#line 9
            min r1.y, r2.y, c9.y
            max r0.x, r1.y, c14.w  // ::Coerce<0>
            min r1.y, r2.w, c9.y
            max r0.y, r1.y, c14.w  // ::Coerce<0>
            min r1.y, r2.x, c9.y
            max r0.z, r1.y, c14.w  // ::Coerce<0>

#line 539
          else
            if_eq c0.x, -r3.w

#line 288
              if_lt -r0.y, c14.w

#line 284
                mul r1.y, r0.x, c5.y  // ::h<0>

#line 290
                mad r1.z, r0.z, c16.x, c16.y
                add r1.z, -r1_abs.z, c9.y
                mul r3.x, r0.y, r1.z  // ::chroma<0>
                cmp r1.zw, r0.x, c21.xyxy, c21
                mul r1.y, r1.w, r1.y
                frc r1.y, r1.y
                mad r1.y, r1.z, r1.y, c9.x
                add r1.y, -r1_abs.y, c9.y
                mul r3.y, r1.y, r3.x  // ::v<0>

#line 311
                mad r5, r1.x, -r4.x, c15

#line 317
                mad r6, r1.x, r4.x, -c15.wzyx

#line 323
                mad r1.y, r1.x, r4.x, c16.z
                mad r1.zw, r1.x, -r4.x, -c16.xywz

#line 328
                cmp r1.zw, r1, c10.x, c10.y
                cmp r1.y, r1.y, r1.z, c14.w
                mov r3.z, c14.w
                cmp r2.xyw, r1.y, c14.w, r3.xzzy  // ::result<0,1,2>
                cmp r1.y, r6.w, r1.w, c14.w
                cmp r1.yzw, r1.y, r2.xxyw, r3.xyzx  // ::result<0,1,2>
                cmp r5, r5, c10.x, c10.y
                cmp r2.xyw, r6.zyzx, r5.xyzz, c14.w
                cmp r1.yzw, r2.x, r1, r3.xzyx  // ::result<0,1,2>
                cmp r1.yzw, r2.y, r1, r3.xzxy  // ::result<0,1,2>
                cmp r1.yzw, r2.w, r1, r3.xyxz  // ::result<0,1,2>
                cmp r2.x, r0.x, r5.w, c14.w
                cmp r1.yzw, r2.x, r1, r3.xxyz  // ::result<0,1,2>
                mad r2.x, r3.x, -c6.y, r0.z  // ::w<0>

#line 333
                add r0.xyz, r1.yzww, r2.x  // ::result<0,1,2>
              else

#line 338
                mov r0.xyz, r0.z  // ::result<0,1,2>
              endif

#line 544
            else
              if_eq c0.x, -r2.z

#line 353
                mad r1.y, r0.y, -c10_abs.z, c10_abs.x  // ::minOverMax<0>
                if_lt -r1.y, c14.w

#line 358
                  if_lt r0.x, c12.x
                    mul r1.z, r0.x, c5.y  // ::h<0>
                    rcp r1.w, r1.y
                    add r2.x, r1.w, c9.x
                    mad r2.x, r1.z, r2.x, c9.y  // ::part<0>
                    mul r2.y, r1.w, r1.w
                    mul r2.x, r2.x, r2.x
                    mul r2.x, r2.x, c12.y
                    mad r2.x, r2.y, c12.z, r2.x
                    add r2.x, r2.x, c12.w
                    rsq r2.x, r2.x
                    mul r2.z, r0.z, r2.x  // ::b<0>
                    mul r2.x, r1.w, r2.z  // ::r<0>
                    mad r1.w, r2.z, r1.w, -r2.z
                    mad r2.y, r1.z, r1.w, r2.z  // ::g<0>
                  else
                    if_lt r0.x, c5.w

#line 369
                      mad r1.z, r0.x, -c11.x, c11.y
                      mul r1.z, r1.z, c22.x  // ::h<0>
                      rcp r1.w, r1.y
                      add r2.w, r1.w, c9.x
                      mad r2.w, r1.z, r2.w, c9.y  // ::part<0>
                      mul r3.x, r1.w, r1.w
                      mul r2.w, r2.w, r2.w
                      mul r2.w, r2.w, c12.z
                      mad r2.w, r3.x, c12.y, r2.w
                      add r2.w, r2.w, c12.w
                      rsq r2.w, r2.w
                      mul r2.z, r0.z, r2.w  // ::b<0>
                      mul r2.y, r1.w, r2.z  // ::g<0>
                      mad r1.w, r2.z, r1.w, -r2.z
                      mad r2.x, r1.z, r1.w, r2.z  // ::r<0>
                    else
                      if_lt r0.x, c11.z
                        mad r1.z, r0.x, c11.x, c11.w
                        mul r1.z, r1.z, c22.x  // ::h<0>
                        rcp r1.w, r1.y
                        add r2.w, r1.w, c9.x
                        mad r2.w, r1.z, r2.w, c9.y  // ::part<0>

#line 380
                        mul r3.x, r1.w, r1.w
                        mul r2.w, r2.w, r2.w
                        mul r2.w, r2.w, c12.w
                        mad r2.w, r3.x, c12.y, r2.w
                        add r2.w, r2.w, c12.z
                        rsq r2.w, r2.w
                        mul r2.x, r0.z, r2.w  // ::r<0>
                        mul r2.y, r1.w, r2.x  // ::g<0>
                        mad r1.w, r2.x, r1.w, -r2.x
                        mad r2.z, r1.z, r1.w, r2.x  // ::b<0>
                      else
                        if_lt r0.x, c8.x
                          mad r1.z, r0.x, -c13.x, c13.y
                          mul r1.z, r1.z, c22.x  // ::h<0>
                          rcp r1.w, r1.y
                          add r2.w, r1.w, c9.x
                          mad r2.w, r1.z, r2.w, c9.y  // ::part<0>
                          mul r3.x, r1.w, r1.w
                          mul r2.w, r2.w, r2.w
                          mul r2.w, r2.w, c12.y
                          mad r2.w, r3.x, c12.w, r2.w
                          add r2.w, r2.w, c12.z
                          rsq r2.w, r2.w
                          mul r2.x, r0.z, r2.w  // ::r<0>
                          mul r2.z, r1.w, r2.x  // ::b<0>

#line 391
                          mad r1.w, r2.x, r1.w, -r2.x
                          mad r2.y, r1.z, r1.w, r2.x  // ::g<0>
                        else
                          mad r1.z, r1.x, r4.x, c13.z
                          mad r1.w, r0.x, c13.x, c13.w
                          mul r1.w, r1.w, c22.x  // ::h<0>
                          rcp r1.y, r1.y
                          add r2.w, r1.y, c9.x
                          mad r3.x, r1.w, r2.w, c9.y  // ::part<0>
                          mul r3.y, r1.y, r1.y

#line 407
                          mul r3.yz, r3.y, c12.xwzw

#line 398
                          mul r3.x, r3.x, r3.x
                          mad r3.x, r3.x, c12.z, r3.y
                          add r3.x, r3.x, c12.y
                          rsq r3.x, r3.x
                          mul r5.y, r0.z, r3.x  // ::g<0>
                          mul r5.z, r1.y, r5.y  // ::b<0>
                          mad r3.x, r5.y, r1.y, -r5.y
                          mad r5.x, r1.w, r3.x, r5.y  // ::r<0>

#line 405
                          mad r1.w, r0.x, -c18.x, c18.y
                          mul r1.w, r1.w, c22.x  // ::h<0>
                          mad r2.w, r1.w, r2.w, c9.y  // ::part<0>
                          mul r2.w, r2.w, r2.w
                          mad r2.w, r2.w, c12.w, r3.z
                          add r2.w, r2.w, c12.y
                          rsq r2.w, r2.w
                          mul r3.y, r0.z, r2.w  // ::g<0>
                          mul r3.x, r1.y, r3.y  // ::r<0>
                          mad r1.y, r3.y, r1.y, -r3.y
                          mad r3.z, r1.w, r1.y, r3.y  // ::b<0>
                          cmp r2.xyz, r1.z, r3, r5  // ::r<0>, ::g<0>, ::b<0>
                        endif
                      endif
                    endif
                  endif
                else

#line 415
                  if_lt r0.x, c12.x
                    mul r1.y, r0.x, c5.y  // ::h<0>
                    mul r1.z, r0.z, r0.z
                    mul r1.w, r0.x, r1.y
                    mad r1.w, r1.w, c18.z, c18.w
                    rcp r1.w, r1.w
                    mul r1.z, r1.w, r1.z
                    rsq r1.z, r1.z
                    rcp r2.x, r1.z  // ::r<0>
                    mul r2.y, r1.y, r2.x  // ::g<0>
                    mov r2.z, c14.w
                  else
                    if_lt r0.x, c5.w
                      mad r1.y, r0.x, -c11.x, c11.y
                      mul r1.z, r1.y, c22.x  // ::h<0>

#line 426
                      mul r1.w, r0.z, r0.z
                      mul r1.y, r1.y, r1.z
                      mad r1.y, r1.y, c20.x, c20.y
                      rcp r1.y, r1.y
                      mul r1.y, r1.y, r1.w
                      rsq r1.y, r1.y
                      rcp r2.y, r1.y  // ::g<0>
                      mul r2.x, r1.z, r2.y  // ::r<0>
                      mov r2.z, c14.w
                    else

#line 449
                      mad r1.yz, r0.x, c23.x, c23
                      mul r3.xy, r1.yzzw, c22.x  // ::h<0,0>

#line 434
                      mul r1.w, r0.z, r0.z

#line 450
                      mul r1.yz, r1, r3.xxyw
                      mad r1.yz, r1, c20.xzxw, c20.xyww

#line 434
                      rcp r1.y, r1.y
                      mul r1.y, r1.y, r1.w
                      rsq r1.y, r1.y
                      rcp r5.y, r1.y  // ::g<0>
                      mul r5.z, r3.x, r5.y  // ::b<0>

#line 457
                      mad r3.xz, r0.x, -c23_abs.x, c23_abs.zyww
                      mul r4.yz, r3.xxzw, c22.x  // ::h<0,0>
                      mul r3.xz, r3, r4.yyzw
                      mad r3.xz, r3, c19.xyyw, c19.zyww

#line 442
                      rcp r1.y, r3.x
                      mul r1.y, r1.y, r1.w
                      rsq r1.y, r1.y
                      rcp r6.z, r1.y  // ::b<0>
                      mul r6.y, r4.y, r6.z  // ::g<0>

#line 447
                      mad r4.xyw, r1.x, r4.x, c17.xyzz

#line 450
                      rcp r1.x, r1.z
                      mul r1.x, r1.x, r1.w
                      rsq r1.x, r1.x
                      rcp r1.z, r1.x  // ::b<0>
                      mul r1.x, r3.y, r1.z  // ::r<0>

#line 458
                      rcp r2.w, r3.z
                      mul r1.w, r1.w, r2.w
                      rsq r1.w, r1.w
                      rcp r3.x, r1.w  // ::r<0>
                      mul r3.z, r4.z, r3.x  // ::b<0>
                      mov r3.y, c14.w
                      mov r1.y, c14.w
                      cmp r1.xyz, r4.w, r3, r1  // ::r<0>, ::g<0>, ::b<0>
                      mov r6.x, c14.w
                      cmp r1.xyz, r4.y, r1, r6  // ::r<0>, ::g<0>, ::b<0>
                      mov r5.x, c14.w
                      cmp r2.xyz, r4.x, r1, r5  // ::r<0>, ::g<0>, ::b<0>
                    endif
                  endif
                endif

#line 465
                add r1.xyz, r2, c6.y
                frc r2.xyz, r1
                add r1.xyz, r1, -r2
                mul r1.xyz, r1, c5.z  // Coerce::input<0,0,0>

#line 9
                min r2.xyz, r1, c9.y
                max r0.xyz, r2, c14.w  // ::Coerce<0,0,0>

#line 549
              else
                mov r0.xyz, c14.w
              endif
            endif
          endif
        endif
      endif
    endif
    mov oC0, r0  // ::main<0,1,2,3>

// approximately 453 instruction slots used (1 texture, 452 arithmetic)
