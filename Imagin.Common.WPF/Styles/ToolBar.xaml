<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:Controls="clr-namespace:Imagin.Common.Controls"
    xmlns:Converters="clr-namespace:Imagin.Common.Converters"
    xmlns:Markup="clr-namespace:Imagin.Common.Markup"
    xmlns:s="clr-namespace:System;assembly=mscorlib">
    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="Border"
                        SnapsToDevicePixels="True"
                        Background="#00000000">
                        <Grid>
                            <Controls:MaskedImage
                                x:Name="MaskedImage"
                                RenderTransformOrigin="0.5,0.5"
                                Source="{Markup:Image Imagin.Common.WPF, Images/ArrowDownSmall.png}"
                                SourceColor="{DynamicResource Brush.Image}">
                                <Controls:MaskedImage.RenderTransform>
                                    <RotateTransform Angle="-90"/>
                                </Controls:MaskedImage.RenderTransform>
                            </Controls:MaskedImage>
                            <ContentPresenter/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.4"
                                            From="-90"
                                            Storyboard.TargetName="MaskedImage" 
                                            Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                            To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.4"
                                            From="0"
                                            Storyboard.TargetName="MaskedImage" 
                                            Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                            To="-90"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter TargetName="MaskedImage" Property="SourceColor" Value="{DynamicResource Brush.Image.Checked.Foreground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush.Image.Checked}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource Brush.Image.Checked}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Property="Background" Value="#11000000"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Brush.ToolBar.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.ToolBar.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <ControlTemplate.Resources>
                        <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                    </ControlTemplate.Resources>
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
                        <DockPanel>
                            <ToggleButton 
                                DockPanel.Dock="Right"
                                IsEnabled="{TemplateBinding HasOverflowItems}"
                                ClickMode="Press"
                                IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource ToolBarOverflowButtonStyle}">
                                <Popup x:Name="OverflowPopup"
                                    AllowsTransparency="True"
                                    Placement="Bottom"
                                    Focusable="False"
                                    PopupAnimation="Slide"
                                    IsOpen="{Binding IsOverflowOpen, 
                                    RelativeSource={RelativeSource TemplatedParent}}"
								    StaysOpen="True">
                                    <Border x:Name="DropDownBorder"
                                        Background="{DynamicResource Brush.ContextMenu.Background}" 
                                        BorderBrush="{DynamicResource Brush.ContextMenu.Border}" 
                                        BorderThickness="1" 
                                        Padding="5" 
                                        Margin="5,0,5,5">
                                        <Border.Effect>
                                            <DropShadowEffect 
                                                BlurRadius="6" 
                                                Color="{DynamicResource Brush.ContextMenu.DropShadow}"
                                                Opacity="0.40" 
                                                ShadowDepth="3"/>
                                        </Border.Effect>
                                        <ToolBarOverflowPanel 
                                            WrapWidth="86" 
                                            Name="PART_ToolBarOverflowPanel"
                                            Margin="2,2,2,2" 
                                            FocusVisualStyle="{x:Null}" 
                                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                            Focusable="True"
                                            KeyboardNavigation.TabNavigation="Cycle"
                                            KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>
                            
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
                                IsItemsHost="true"
                                Margin="0,1,2,2" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource Brush.ToolBarTray.Background}" />
    </Style>
</ResourceDictionary>