<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Imagin.Common.Controls"
    xmlns:Converters="clr-namespace:Imagin.Common.Converters"
    xmlns:Linq="clr-namespace:Imagin.Common.Linq"
    xmlns:Markup="clr-namespace:Imagin.Common.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{Markup:Uri Imagin.Common.WPF, Styles/FrameworkElement.xaml}"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Background" Value="{DynamicResource Brush.ComboBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.ComboBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.ComboBox.Foreground}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel                                
                        ScrollViewer.PanningMode="None"
                        ScrollViewer.PanningRatio="0"
                        KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="7,6" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="None" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="15"/>
                        </Grid.ColumnDefinitions>
                        <ToggleButton 
                            Grid.ColumnSpan="2" 
                            x:Name="PART_ToggleButton" 
                            Foreground="{TemplateBinding Foreground}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Focusable="false" 
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                            ClickMode="Press">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition Width="20" />
                                        </Grid.ColumnDefinitions>
                                        <Border 
                                            x:Name="Border" 
                                            Grid.ColumnSpan="2" 
                                            Background="{TemplateBinding Background}" 
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}"/>
                                        <Path 
                                            Grid.Column="1" 
                                            x:Name="PART_Arrow" 
                                            Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                                            Fill="{TemplateBinding Foreground}" 
                                            HorizontalAlignment="Center"  
                                            RenderTransformOrigin="0.5, 0.5"
                                            VerticalAlignment="Center"
                                            Visibility="{Binding IsReadOnly, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=1, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
                                            <Path.RenderTransform>
                                                <RotateTransform/>
                                            </Path.RenderTransform>
                                        </Path>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="PART_Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="90" Duration="0:0:0.4"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="PART_Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.4"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ContentPresenter 
                            x:Name="ContentSite" 
                            IsHitTestVisible="False" 
                            Content="{TemplateBinding SelectionBoxItem}" 
                            ContentTemplate="{Binding Path=(Linq:ComboBoxExtensions.SelectedItemTemplate), RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" 
                            ContentTemplateSelector="{Binding Path=(Linq:ComboBoxExtensions.SelectedItemTemplateSelector), RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}" 
                            HorizontalAlignment="Left"
                            Margin="{TemplateBinding Padding}"
                            VerticalAlignment="Center">
                        </ContentPresenter>
                        <local:TextBox 
                            x:Name="TextBox" 
                            Focusable="True" 
                            Background="Transparent" 
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}" 
                            Margin="8,0"  
                            Padding="0"
                            Placeholder="{Binding (Linq:ComboBoxExtensions.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                            Visibility="Collapsed" 
                            Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <TextBlock 
                            x:Name="Placeholder"
                            Text="{Binding (Linq:ComboBoxExtensions.Placeholder), RelativeSource={RelativeSource TemplatedParent}}"
                            Visibility="Collapsed"/>
                        
                        <Popup 
                            x:Name="Popup" 
                            AllowsTransparency="True"
                            Focusable="False" 
                            IsOpen="{TemplateBinding IsDropDownOpen}" 
                            Placement="Bottom" 
                            PopupAnimation="Slide">
                            <Grid 
                                x:Name="DropDown" 
                                SnapsToDevicePixels="True"
                                MinWidth="{TemplateBinding ActualWidth}" 
                                MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                    x:Name="DropDownBorder" 
                                    Background="{DynamicResource Brush.ComboBox.DropDown.Background}"
                                    BorderBrush="{DynamicResource Brush.ComboBox.DropDown.Border}" 
                                    BorderThickness="1"/>
                                <ScrollViewer Margin="1,2,1,1" SnapsToDevicePixels="True">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Linq:ComboBoxExtensions.SelectedItemTemplate" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplate" Value="{Binding SelectionBoxItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="Linq:ComboBoxExtensions.SelectedItemTemplateSelector" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplateSelector" Value="{Binding ItemTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="125" />
                        </Trigger>
                        <Trigger Property="IsEditable" Value="True">
                            <Setter TargetName="TextBox" Property="Visibility" Value="Visible" />
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="SelectedValue" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Placeholder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Brush.ComboBox.MouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ComboBox.MouseOver.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource Brush.ComboBox.MouseOver.Foreground}"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsEditable" Value="False">
                <Setter Property="Cursor" Value="Hand" />
            </Trigger>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" Value="{DynamicResource Brush.ComboBox.Checked.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.ComboBox.Checked.Border}" />
                <Setter Property="Foreground" Value="{DynamicResource Brush.ComboBox.Checked.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type local:FontFamilyBox}" TargetType="{x:Type local:FontFamilyBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Type local:FontSizeBox}" TargetType="{x:Type local:FontSizeBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Type local:FontStyleBox}" TargetType="{x:Type local:FontStyleBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Type local:FontWeightBox}" TargetType="{x:Type local:FontWeightBox}" BasedOn="{StaticResource {x:Type ComboBox}}"/>

    <Style x:Key="{x:Type local:TimeZoneBox}" TargetType="{x:Type local:TimeZoneBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding DisplayName}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TreeViewComboBox}" TargetType="{x:Type local:TreeViewComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="OverridesDefaultStyle" Value="False"/>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.ComboBoxItem.Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border 
                        x:Name="Border" 
                        Background="{TemplateBinding Background}"
                        Padding="{TemplateBinding Padding}" 
                        SnapsToDevicePixels="True">
                        <ContentPresenter 
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Brush.ComboBoxItem.Selected.Background}" />
                            <Setter Property="Foreground" Value="{DynamicResource Brush.ComboBoxItem.Selected.Foreground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Brush.ComboBoxItem.MouseOver.Background}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
</ResourceDictionary>