<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:l="clr-namespace:Imagin.Common.Globalization.Extensions"
    xmlns:local="clr-namespace:Imagin.Common.Controls"
    xmlns:Converters="clr-namespace:Imagin.Common.Converters"
    xmlns:Data="clr-namespace:Imagin.Common.Data"
    xmlns:Linq="clr-namespace:Imagin.Common.Linq"
    xmlns:Markup="clr-namespace:Imagin.Common.Markup">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{Markup:Uri Imagin.Common.WPF, Styles/FrameworkElement.xaml}"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Style x:Key="Style.TextBox" TargetType="{x:Type TextBoxBase}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Background" Value="{DynamicResource Brush.TextBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{DynamicResource Brush.TextBox.Caret}" />
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}">
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Cut}"
                        FontFamily="{Binding ActualFontFamily}"
                        Header="{l:Loc Imagin.Common.WPF:Main:Cut}"
                        Icon="{Markup:Image Imagin.Common.WPF, Images/Cut.png}"
                        InputGestureText="Ctrl + X"/>
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Copy}"
                        FontFamily="{Binding ActualFontFamily}"
                        Header="{l:Loc Imagin.Common.WPF:Main:Copy}"
                        Icon="{Markup:Image Imagin.Common.WPF, Images/Copy.png}"
                        InputGestureText="Ctrl + C"/>
                    <MenuItem 
                        Command="{x:Static ApplicationCommands.Paste}"
                        FontFamily="{Binding ActualFontFamily}"
                        Header="{l:Loc Imagin.Common.WPF:Main:Paste}"
                        Icon="{Markup:Image Imagin.Common.WPF, Images/Paste.png}"
                        InputGestureText="Ctrl + V"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="False" />
        <Setter Property="Padding" Value="6" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Selection}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.MouseOver.Border}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Brush.TextBox.Focused.Border}" />
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Disabled.Selection}" />
                <Setter Property="Opacity" Value="0.6" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="SelectionBrush" Value="{DynamicResource Brush.TextBox.Disabled.Selection}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type TextBox}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource Style.TextBox}"/>

    <Style x:Key="{x:Type local:TextBox}" TargetType="{x:Type local:TextBox}" BasedOn="{StaticResource Style.TextBox}">
        <Setter Property="ActualFontFamily" Value="{Binding FontFamily, Mode=OneTime, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ClearButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                    </DataTemplate.Resources>
                    <local:MaskedButton
                        DataContext="{Binding Data}"
                        Command="{Binding ClearCommand}"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/XRound.png"
                        Margin="0,0,5,0"
                        ToolTip="Clear"
                        Visibility="{Binding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource Self}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="EnterButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data}"
                        Command="{Binding EnterCommand}"
                        Focusable="False"
                        Margin="0,0,5,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/NextArrow.png"
                        ToolTip="Enter"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Converters:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
                    </DataTemplate.Resources>
                    <TextBlock 
                        DataContext="{Binding Data}"
                        FontFamily="{Binding ActualFontFamily}"
                        FontSize="{Binding FontSize}"
                        FontStretch="{Binding FontStretch}"
                        FontStyle="{Binding FontStyle}"
                        FontWeight="{Binding FontWeight}"
                        Foreground="{Binding Foreground}"
                        HorizontalAlignment="{Binding HorizontalContentAlignment}" 
                        Margin="{Binding Padding}"
                        Opacity="0.4"
                        SnapsToDevicePixels="{Binding SnapsToDevicePixels}"
                        Text="{Binding Placeholder}"
                        TextTrimming="{Binding TextTrimming}"
                        TextWrapping="{Binding TextWrapping}"
                        VerticalAlignment="{Binding VerticalContentAlignment}"
                        Visibility="{Binding Text, Converter={StaticResource StringToVisibilityConverter}, ConverterParameter=1}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DataTemplate.Resources>
                        <Converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
                    </DataTemplate.Resources>
                    <local:MaskedToggleMenu 
                        DataContext="{Binding Data}"
                        Focusable="False"
                        IsChecked="{Binding MaskCharacters, Converter={StaticResource InverseBooleanConverter}}"  
                        Margin="0,0,5,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/Toggle.png" 
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="MaskCharacters" Value="True">
                <Setter Property="FontFamily" Value="pack://application:,,,/Imagin.Common.WPF;component/Fonts/Password.ttf#Password"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:LabelBox}" TargetType="{x:Type local:LabelBox}" BasedOn="{StaticResource {x:Type local:TextBox}}">
        <Setter Property="Padding" Value="4"/>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="Cursor" Value="IBeam"/>
                <Setter Property="Focusable" Value="True"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="False">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Focusable" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:UriBox}" TargetType="{x:Type local:UriBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <Style x:Key="{x:Type local:VersionBox}" TargetType="{x:Type local:VersionBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>
    
    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:UpDown}" TargetType="{x:Type local:UpDown}" BasedOn="{StaticResource {x:Type local:TextBox}}">
        <Setter Property="DownButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding DownCommand}"
                        CommandParameter="Down"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/ArrowDown.png"
                        SourceHeight="9" 
                        SourceWidth="9" 
                        ToolTip="Decrease"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="UpButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding UpCommand}"
                        CommandParameter="Up"
                        Focusable="False"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/ArrowUp.png"
                        SourceHeight="9" 
                        SourceWidth="9" 
                        ToolTip="Increase"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:ByteUpDown}" TargetType="{x:Type local:ByteUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DecimalUpDown}" TargetType="{x:Type local:DecimalUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:DoubleUpDown}" TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:SingleUpDown}" TargetType="{x:Type local:SingleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int16UpDown}" TargetType="{x:Type local:Int16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int32UpDown}" TargetType="{x:Type local:Int32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:Int64UpDown}" TargetType="{x:Type local:Int64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UDoubleUpDown}" TargetType="{x:Type local:UDoubleUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt16UpDown}" TargetType="{x:Type local:UInt16UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt32UpDown}" TargetType="{x:Type local:UInt32UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:UInt64UpDown}" TargetType="{x:Type local:UInt64UpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:DateTimeUpDown}" TargetType="{x:Type local:DateTimeUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}">
        <Setter Property="DropDownStretch" Value="None"/>
        <Setter Property="DropDownStyle">
            <Setter.Value>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{DynamicResource Brush.Popup.Background}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.Popup.BorderBrush}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="StaysOpenOnSelection" Value="True"/>
    </Style>

    <Style x:Key="{x:Type local:TimeSpanUpDown}" TargetType="{x:Type local:TimeSpanUpDown}" BasedOn="{StaticResource {x:Type local:UpDown}}"/>

    <Style x:Key="{x:Type local:TimeUpDown}" TargetType="{x:Type local:TimeUpDown}" BasedOn="{StaticResource {x:Type local:TimeSpanUpDown}}">
        <Setter Property="DropDownStyle">
            <Setter.Value>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{DynamicResource Brush.Popup.Background}"/>
                    <Setter Property="BorderBrush" Value="{DynamicResource Brush.Popup.BorderBrush}"/>
                    <Setter Property="BorderThickness" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ..................................................................................... -->

    <Style x:Key="{x:Type local:AlphaNumericBox}" TargetType="{x:Type local:AlphaNumericBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <Style x:Key="{x:Type local:FileBox}" TargetType="{x:Type local:FileBox}" BasedOn="{StaticResource {x:Type local:TextBox}}">
        <Setter Property="BrowseButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedButton 
                        DataContext="{Binding Data, Mode=OneWay}"
                        Command="{Binding BrowseCommand}"
                        Focusable="False"
                        SourceColor="{Binding Foreground}"
                        Margin="0,0,5,0"
                        Source="pack://application:,,,/Imagin.Common.WPF;component/Images/Folder.png"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BrowseButtonToolTip" Value="Browse"/>
        <Setter Property="BrowseButtonVisibility" Value="True"/>
        <Setter Property="BrowseMode" Value="OpenFile"/>
        <Setter Property="BrowseTitle" Value="Browse..."/>
        <Setter Property="ValidateTemplate">
            <Setter.Value>
                <DataTemplate>
                    <local:MaskedImage Margin="0,0,5,0">
                        <local:MaskedImage.Style>
                            <Style TargetType="{x:Type local:MaskedImage}" BasedOn="{StaticResource {x:Type local:MaskedImage}}">
                                <Setter Property="Source" Value="{Markup:Image Imagin.Common.WPF, Images/XRound.png}"/>
                                <Setter Property="SourceColor" Value="{DynamicResource Brush.Red}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Data:Ancestor IsValid, {x:Type local:FileBox}}" Value="True">
                                        <Setter Property="Source" Value="{Markup:Image Imagin.Common.WPF, Images/CheckmarkRound.png}"/>
                                        <Setter Property="SourceColor" Value="{DynamicResource Brush.Green}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </local:MaskedImage.Style>
                    </local:MaskedImage>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ValidateToolTip" Value="{x:Null}"/>
    </Style>

    <Style x:Key="{x:Type local:RegexBox}" TargetType="{x:Type local:RegexBox}" BasedOn="{StaticResource {x:Type local:TextBox}}"/>

    <!-- ..................................................................................... -->
    
    <Style x:Key="{x:Type RichTextBox}" TargetType="{x:Type RichTextBox}" BasedOn="{StaticResource Style.TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBoxBase">
                    <Border
                        Name="Bd"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        SnapsToDevicePixels="True">
                        <ScrollViewer 
                            Name="PART_ContentHost"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type local:TokenView}" TargetType="{x:Type local:TokenView}" BasedOn="{StaticResource {x:Type RichTextBox}}">
        <Setter Property="Linq:TextBoxExtensions.EnableCopyCommand" Value="False"/>
        <Setter Property="Linq:TextBoxExtensions.EnableCutCommand" Value="False"/>
        <Setter Property="Linq:TextBoxExtensions.EnablePasteCommand" Value="False"/>
        <Setter Property="Linq:FrameworkElementExtensions.EnableContextMenu" Value="False"/>
        <Setter Property="Padding" Value="3,7"/>
    </Style>
</ResourceDictionary>