<i:BaseWindow 
    x:Class="Random.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://imagin.tech/imagin/common"
    xmlns:local="clr-namespace:Random"
    i:LocalizeDictionary.DesignCulture="en"
    i:ResxLocalizationProvider.DefaultAssembly="{i:AssemblyName}"
    i:ResxLocalizationProvider.DefaultDictionary="Main"
    Height="{i:Options WindowHeight, Mode=TwoWay}"
    ResizeMode="CanResizeWithGrip"
    Title="{i:AssemblyProduct}"    
    TitleIcon="{x:Null}"
    UseLayoutRounding="True"
    Width="{i:Options WindowWidth, Mode=TwoWay}"
    WindowStartupLocation="CenterScreen">
    <i:BaseWindow.Buttons>
        <i:WindowButton
            Command="{Binding AboutCommand}"
            Content="{i:Image Random, Images/Info.png}"
            ContentSize="12,12"
            IsCheckable="False"
            ToolTip="About"/>
        <i:WindowButton
            Content="{i:Image Random, Images/Options.png}"
            ContentSize="12,12"
            IsCheckable="True"
            IsChecked="{Binding ViewOptions, Mode=TwoWay}"
            ToolTip="Options"/>
    </i:BaseWindow.Buttons>
    <i:BaseWindow.Resources>
        <i:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <i:FileNameConverter x:Key="FileNameConverter"/>
        <i:ObjectToTypeConverter x:Key="ObjectToTypeConverter"/>
        <i:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <i:ToStringConverter x:Key="ToStringConverter"/>
    </i:BaseWindow.Resources> 
    <Grid>
        <Grid Visibility="{Binding ViewOptions, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=1}">
            <Grid i:GridExtensions.Rows="*,Auto">
                <Grid 
                    i:GridExtensions.Rows="Auto,*">
                        <Grid 
                            Grid.Row="0"
                            Margin="10"
                            i:GridExtensions.Columns="Auto,*,Auto,Auto"
                            i:PanelExtensions.Spacing="0,0,5,0"
                            i:PanelExtensions.SpacingExcept="Last">
                            <i:MaskedToggleButton
                                IsEnabled="{Binding Generating, Converter={StaticResource InverseBooleanConverter}}"
                                Source="{i:Image Random, Images/Plus.png}">
                                <i:MaskedToggleButton.Menu>
                                    <ContextMenu>
                                        <ContextMenu.Resources>
                                            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Converter={StaticResource ObjectToTypeConverter}}" Value="{x:Type local:Characters}">
                                                        <Setter Property="Command" Value="{i:MainViewModel AddCharactersCommand}"/>
                                                        <Setter Property="CommandParameter" Value="{Binding}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContextMenu.Resources>
                                        <ContextMenu.ItemsSource>
                                            <CompositeCollection>
                                                <CollectionContainer Collection="{i:Enumerate {x:Type local:Characters}}"/>
                                                <Separator/>
                                                <MenuItem Header="Custom"
                                                    ItemsSource="{i:Options CustomCharactersList}">
                                                    <MenuItem.ItemContainerStyle>
                                                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                            <Setter Property="Command" Value="{i:MainViewModel AddCustomCharactersCommand}"/>
                                                            <Setter Property="CommandParameter" Value="{Binding}"/>
                                                        </Style>
                                                    </MenuItem.ItemContainerStyle>
                                                </MenuItem>
                                            </CompositeCollection>
                                        </ContextMenu.ItemsSource>
                                    </ContextMenu>
                                </i:MaskedToggleButton.Menu>
                            </i:MaskedToggleButton>
                            <i:TextBox 
                                Grid.Column="1"
                                IsClearEnabled="True"
                                IsEnabled="{Binding Generating, Converter={StaticResource InverseBooleanConverter}}"
                                Placeholder="Characters"
                                Text="{i:Options Characters, Mode=TwoWay}"
                                ToolTip="Characters"/>
                            <i:UInt32UpDown
                                Grid.Column="2"
                                IsEnabled="{Binding Generating, Converter={StaticResource InverseBooleanConverter}}"
                                ToolTip="Length"
                                Value="{i:Options Length, Mode=TwoWay}"
                                VerticalAlignment="Center"/>
                            <Button
                                Grid.Column="3"
                                Command="{Binding GenerateCommand}"
                                Style="{DynamicResource Button.Green}"
                                ToolTip="Generate">
                                <i:MaskedImage
                                    Source="{i:Image Random, Images/Refresh.png}"
                                    SourceColor="White"/>
                            </Button>
                        </Grid>
                    <Grid
                        Grid.Row="1">
                        <i:TextBox 
                            AcceptsReturn="True"
                            BorderThickness="1"
                            FontFamily="{i:Options FontFamily}"
                            FontSize="{i:Options FontSize, Mode=TwoWay}"
                            HorizontalAlignment="Stretch"
                            HorizontalContentAlignment="{i:Options TextHorizontalAlignment}"
                            IsReadOnly="True"
                            Margin="10,0,10,10"
                            ScrollViewer.VerticalScrollBarVisibility="Auto"
                            Text="{i:Options Text, Mode=TwoWay}"
                            TextAlignment="Left"
                            TextWrapping="Wrap"
                            VerticalAlignment="Stretch"
                            VerticalContentAlignment="{i:Options TextVerticalAlignment}"
                            i:ControlExtensions.FontSizeWheel="True"
                            i:ControlExtensions.FontSizeWheelMaximum="72"
                            i:ControlExtensions.FontSizeWheelMinimum="8"/>
                        <i:ProgressRing 
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            Visibility="{Binding Generating, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </Grid>
                </Grid>
            </Grid>
        </Grid>
        <i:PropertyGrid
            BorderThickness="0"
            DescriptionVisibility="Collapsed"
            GroupName="Category"
            GroupVisibility="True"
            HeaderVisibility="Collapsed"
            HeadersVisibility="None"
            Margin="0,0,0,10"
            Source="{i:Options}"
            Visibility="{Binding ViewOptions, Converter={StaticResource BooleanToVisibilityConverter}}"/>
    </Grid>
</i:BaseWindow>